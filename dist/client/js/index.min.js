(function(Q){function F(U){if(B[U])return B[U].exports;var g=B[U]={i:U,l:!1,exports:{}};return Q[U].call(g.exports,g,g.exports,F),g.l=!0,g.exports}var B={};return F.m=Q,F.c=B,F.d=function(Q,B,U){F.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:U})},F.r=function(Q){'undefined'!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:'Module'}),Object.defineProperty(Q,'__esModule',{value:!0})},F.t=function(Q,B){if(1&B&&(Q=F(Q)),8&B)return Q;if(4&B&&'object'==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(F.r(U),Object.defineProperty(U,'default',{enumerable:!0,value:Q}),2&B&&'string'!=typeof Q)for(var g in Q)F.d(U,g,function(F){return Q[F]}.bind(null,g));return U},F.n=function(Q){var B=Q&&Q.__esModule?function(){return Q['default']}:function(){return Q};return F.d(B,'a',B),B},F.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},F.p='',F(F.s='./src/client/ts/index.ts')})({"../webParticles/node_modules/@simonwep/pickr/dist/pickr.min.js":/*!**********************************************************************!*\
  !*** ../webParticles/node_modules/@simonwep/pickr/dist/pickr.min.js ***!
  \**********************************************************************//*! no static exports found */function(module,exports,__webpack_require__){eval('/*! Pickr 1.4.2 MIT | https://github.com/Simonwep/pickr */\n!function(t,e){ true?module.exports=e():undefined}(window,function(){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);var n={};function i(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),o.push.apply(o,n)}return o}function r(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?i(o,!0).forEach(function(e){s(t,e,o[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):i(o).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))})}return t}function s(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}o.r(n),o.d(n,"on",function(){return c}),o.d(n,"off",function(){return a}),o.d(n,"createElementFromString",function(){return p}),o.d(n,"removeAttribute",function(){return u}),o.d(n,"createFromTemplate",function(){return h}),o.d(n,"eventPath",function(){return d}),o.d(n,"resolveElement",function(){return f}),o.d(n,"adjustableInputNumbers",function(){return m});const c=l.bind(null,"addEventListener"),a=l.bind(null,"removeEventListener");function l(t,e,o,n,i={}){e instanceof HTMLCollection||e instanceof NodeList?e=Array.from(e):Array.isArray(e)||(e=[e]),Array.isArray(o)||(o=[o]);for(const s of e)for(const e of o)s[t](e,n,r({capture:!1},i));return Array.prototype.slice.call(arguments,1)}function p(t){const e=document.createElement("div");return e.innerHTML=t.trim(),e.firstElementChild}function u(t,e){const o=t.getAttribute(e);return t.removeAttribute(e),o}function h(t){return function t(e,o={}){const n=u(e,":obj"),i=u(e,":ref"),r=n?o[n]={}:o;i&&(o[i]=e);for(const o of Array.from(e.children)){const e=u(o,":arr"),n=t(o,e?{}:r);e&&(r[e]||(r[e]=[])).push(Object.keys(n).length?n:o)}return o}(p(t))}function d(t){let e=t.path||t.composedPath&&t.composedPath();if(e)return e;let o=t.target.parentElement;for(e=[t.target,o];o=o.parentElement;)e.push(o);return e.push(document,window),e}function f(t){return t instanceof Element?t:"string"==typeof t?t.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document):null}function m(t,e=(t=>t)){function o(o){const n=[.001,.01,.1][Number(o.shiftKey||2*o.ctrlKey)]*(o.deltaY<0?1:-1);let i=0,r=t.selectionStart;t.value=t.value.replace(/[\\d.]+/g,(t,o)=>o<=r&&o+t.length>=r?(r=o,e(Number(t),n,i)):(i++,t)),t.focus(),t.setSelectionRange(r,r),o.preventDefault(),t.dispatchEvent(new Event("input"))}c(t,"focus",()=>c(window,"wheel",o,{passive:!1})),c(t,"blur",()=>a(window,"wheel",o))}const{min:v,max:b,floor:g,round:y}=Math;function _(t,e,o){e/=100,o/=100;const n=g(t=t/360*6),i=t-n,r=o*(1-e),s=o*(1-i*e),c=o*(1-(1-i)*e),a=n%6;return[255*[o,s,r,r,c,o][a],255*[c,o,o,s,r,r][a],255*[r,r,c,o,o,s][a]]}function w(t,e,o){const n=(2-(e/=100))*(o/=100)/2;return 0!==n&&(e=1===n?0:n<.5?e*o/(2*n):e*o/(2-2*n)),[t,100*e,100*n]}function C(t,e,o){let n,i,r;const s=v(t/=255,e/=255,o/=255),c=b(t,e,o),a=c-s;if(0===a)n=i=0;else{i=a/c;const r=((c-t)/6+a/2)/a,s=((c-e)/6+a/2)/a,l=((c-o)/6+a/2)/a;t===c?n=l-s:e===c?n=1/3+r-l:o===c&&(n=2/3+s-r),n<0?n+=1:n>1&&(n-=1)}return[360*n,100*i,100*(r=c)]}function A(t,e,o,n){return e/=100,o/=100,[...C(255*(1-v(1,(t/=100)*(1-(n/=100))+n)),255*(1-v(1,e*(1-n)+n)),255*(1-v(1,o*(1-n)+n)))]}function k(t,e,o){return e/=100,[t,2*(e*=(o/=100)<.5?o:1-o)/(o+e)*100,100*(o+e)]}function S(t){return C(...t.match(/.{2}/g).map(t=>parseInt(t,16)))}function O(t){t=t.match(/^[a-zA-Z]+$/)?function(t){if("black"===t.toLowerCase())return"#000000";const e=document.createElement("canvas").getContext("2d");return e.fillStyle=t,"#000000"===e.fillStyle?null:e.fillStyle}(t):t;const e={cmyk:/^cmyk[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)/i,rgba:/^((rgba)|rgb)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,hsla:/^((hsla)|hsl)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,hsva:/^((hsva)|hsv)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,hexa:/^#?(([\\dA-Fa-f]{3,4})|([\\dA-Fa-f]{6})|([\\dA-Fa-f]{8}))$/i},o=t=>t.map(t=>/^(|\\d+)\\.\\d+|\\d+$/.test(t)?Number(t):void 0);let n;t:for(const i in e){if(!(n=e[i].exec(t)))continue;const r=t=>!!n[2]==("number"==typeof t);switch(i){case"cmyk":{const[,t,e,r,s]=o(n);if(t>100||e>100||r>100||s>100)break t;return{values:A(t,e,r,s),type:i}}case"rgba":{const[,,,t,e,s,c]=o(n);if(t>255||e>255||s>255||c<0||c>1||!r(c))break t;return{values:[...C(t,e,s),c],a:c,type:i}}case"hexa":{let[,t]=n;4!==t.length&&3!==t.length||(t=t.split("").map(t=>t+t).join(""));const e=t.substring(0,6);let o=t.substring(6);return o=o?parseInt(o,16)/255:void 0,{values:[...S(e),o],a:o,type:i}}case"hsla":{const[,,,t,e,s,c]=o(n);if(t>360||e>100||s>100||c<0||c>1||!r(c))break t;return{values:[...k(t,e,s),c],a:c,type:i}}case"hsva":{const[,,,t,e,s,c]=o(n);if(t>360||e>100||s>100||c<0||c>1||!r(c))break t;return{values:[t,e,s,c],a:c,type:i}}}}return{values:null,type:null}}function j(t=0,e=0,o=0,n=1){const i=(t,e)=>(o=-1)=>e(~o?t.map(t=>Number(t.toFixed(o))):t),r={h:t,s:e,v:o,a:n,toHSVA(){const t=[r.h,r.s,r.v,r.a];return t.toString=i(t,t=>"hsva(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(r.a,")")),t},toHSLA(){const t=[...w(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>"hsla(".concat(t[0],", ").concat(t[1],"%, ").concat(t[2],"%, ").concat(r.a,")")),t},toRGBA(){const t=[..._(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>"rgba(".concat(t[0],", ").concat(t[1],", ").concat(t[2],", ").concat(r.a,")")),t},toCMYK(){const t=function(t,e,o){const n=_(t,e,o),i=n[0]/255,r=n[1]/255,s=n[2]/255;let c,a,l,p;return[100*(a=1===(c=v(1-i,1-r,1-s))?0:(1-i-c)/(1-c)),100*(l=1===c?0:(1-r-c)/(1-c)),100*(p=1===c?0:(1-s-c)/(1-c)),100*c]}(r.h,r.s,r.v);return t.toString=i(t,t=>"cmyk(".concat(t[0],"%, ").concat(t[1],"%, ").concat(t[2],"%, ").concat(t[3],"%)")),t},toHEXA(){const t=function(t,e,o){return _(t,e,o).map(t=>y(t).toString(16).padStart(2,"0"))}(r.h,r.s,r.v),e=r.a>=1?"":Number((255*r.a).toFixed(0)).toString(16).toUpperCase().padStart(2,"0");return e&&t.push(e),t.toString=()=>"#".concat(t.join("").toUpperCase()),t},clone:()=>j(r.h,r.s,r.v,r.a)};return r}const x=t=>Math.max(Math.min(t,1),0);function E(t){const e={options:Object.assign({lock:null,onchange:()=>0,onstop:()=>0},t),_keyboard(t){const{type:n,key:i}=t;if(document.activeElement===o.wrapper){const{lock:o}=e.options,r="ArrowUp"===i,s="ArrowRight"===i,c="ArrowDown"===i,a="ArrowLeft"===i;if("keydown"===n&&(r||s||c||a)){let t=0,n=0;"v"===o?t=r||s?1:-1:"h"===o?t=r||s?-1:1:(n=r?-1:c?1:0,t=a?-1:s?1:0),e.update(x(e.cache.x+.01*t),x(e.cache.y+.01*n))}else i.startsWith("Arrow")&&(e.options.onstop(),t.preventDefault())}},_tapstart(t){c(document,["mouseup","touchend","touchcancel"],e._tapstop),c(document,["mousemove","touchmove"],e._tapmove),t.preventDefault(),e._tapmove(t)},_tapmove(t){const{options:{lock:n},cache:i}=e,{element:r,wrapper:s}=o,c=s.getBoundingClientRect();let a=0,l=0;if(t){const e=t&&t.touches&&t.touches[0];a=t?(e||t).clientX:0,l=t?(e||t).clientY:0,a<c.left?a=c.left:a>c.left+c.width&&(a=c.left+c.width),l<c.top?l=c.top:l>c.top+c.height&&(l=c.top+c.height),a-=c.left,l-=c.top}else i&&(a=i.x*c.width,l=i.y*c.height);"h"!==n&&(r.style.left="calc(".concat(a/c.width*100,"% - ").concat(r.offsetWidth/2,"px)")),"v"!==n&&(r.style.top="calc(".concat(l/c.height*100,"% - ").concat(r.offsetHeight/2,"px)")),e.cache={x:a/c.width,y:l/c.height};const p=x(a/s.offsetWidth),u=x(l/s.offsetHeight);switch(n){case"v":return o.onchange(p);case"h":return o.onchange(u);default:return o.onchange(p,u)}},_tapstop(){e.options.onstop(),a(document,["mouseup","touchend","touchcancel"],e._tapstop),a(document,["mousemove","touchmove"],e._tapmove)},trigger(){e._tapmove()},update(t=0,o=0){const{left:n,top:i,width:r,height:s}=e.options.wrapper.getBoundingClientRect();"h"===e.options.lock&&(o=t),e._tapmove({clientX:n+r*t,clientY:i+s*o})},destroy(){const{options:t,_tapstart:o}=e;a([t.wrapper,t.element],"mousedown",o),a([t.wrapper,t.element],"touchstart",o,{passive:!1})}},{options:o,_tapstart:n,_keyboard:i}=e;return c([o.wrapper,o.element],"mousedown",n),c([o.wrapper,o.element],"touchstart",n,{passive:!1}),c(document,["keydown","keyup"],i),e}function L(t={}){t=Object.assign({onchange:()=>0,className:"",elements:[]},t);const e=c(t.elements,"click",e=>{t.elements.forEach(o=>o.classList[e.target===o?"add":"remove"](t.className)),t.onchange(e)});return{destroy:()=>a(...e)}}function P({el:t,reference:e,padding:o=8}){const n={start:"sme",middle:"mse",end:"ems"},i={top:"tbrl",right:"rltb",bottom:"btrl",left:"lrbt"},r=((t={})=>(e,o=t[e])=>{if(o)return o;const[n,i="middle"]=e.split("-"),r="top"===n||"bottom"===n;return t[e]={position:n,variant:i,isVertical:r}})();return{update(s){const{position:c,variant:a,isVertical:l}=r(s),p=e.getBoundingClientRect(),u=t.getBoundingClientRect(),h=t=>t?{t:p.top-u.height-o,b:p.bottom+o}:{r:p.right+o,l:p.left-u.width-o},d=t=>t?{s:p.left+p.width-u.width,m:-u.width/2+(p.left+p.width/2),e:p.left}:{s:p.bottom-u.height,m:p.bottom-p.height/2-u.height/2,e:p.bottom-p.height},f={};function m(e,o,n){const i="top"===n,r=i?u.height:u.width,s=window[i?"innerHeight":"innerWidth"];for(const i of e){const e=o[i],c=f[n]="".concat(e,"px");if(e>0&&e+r<s)return t.style[n]=c,!0}return!1}for(const t of[l,!l]){const e=m(i[c],h(t),t?"top":"left"),o=m(n[a],d(t),t?"left":"top");if(e&&o)return}t.style.left=f.left,t.style.top=f.top}}}var B=({components:t,strings:e,useAsButton:o,inline:n,appClass:i,theme:r,lockOpacity:s})=>{const c=t=>t?"":\'style="display:none" hidden\',a=h(\'\\n      <div :ref="root" class="pickr">\\n\\n        \'.concat(o?"":\'<button type="button" :ref="button" class="pcr-button"></button>\',\'\\n\\n        <div :ref="app" class="pcr-app \').concat(i||"",\'" data-theme="\').concat(r,\'" \').concat(n?\'style="position: unset"\':"",\' aria-label="color picker dialog" role="window">\\n          <div class="pcr-selection" \').concat(c(t.palette),\'>\\n            <div :obj="preview" class="pcr-color-preview" \').concat(c(t.preview),\'>\\n              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="use previous color"></button>\\n              <div :ref="currentColor" class="pcr-current-color"></div>\\n            </div>\\n\\n            <div :obj="palette" class="pcr-color-palette">\\n              <div :ref="picker" class="pcr-picker"></div>\\n              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="color selection area" role="widget"></div>\\n            </div>\\n\\n            <div :obj="hue" class="pcr-color-chooser" \').concat(c(t.hue),\'>\\n              <div :ref="picker" class="pcr-picker"></div>\\n              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="hue selection slider" role="widget"></div>\\n            </div>\\n\\n            <div :obj="opacity" class="pcr-color-opacity" \').concat(c(t.opacity),\'>\\n              <div :ref="picker" class="pcr-picker"></div>\\n              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="opacity selection slider" role="widget"></div>\\n            </div>\\n          </div>\\n\\n          <div class="pcr-swatches \').concat(t.palette?"":" pcr-last",\'" :ref="swatches"></div> \\n\\n          <div :obj="interaction" class="pcr-interaction" \').concat(c(Object.keys(t.interaction).length),\'>\\n            <input :ref="result" class="pcr-result" type="text" spellcheck="false" \').concat(c(t.interaction.input),\'>\\n\\n            <input :arr="options" class="pcr-type" data-type="HEXA" value="\').concat(s?"HEX":"HEXA",\'" type="button" \').concat(c(t.interaction.hex),\'>\\n            <input :arr="options" class="pcr-type" data-type="RGBA" value="\').concat(s?"RGB":"RGBA",\'" type="button" \').concat(c(t.interaction.rgba),\'>\\n            <input :arr="options" class="pcr-type" data-type="HSLA" value="\').concat(s?"HSL":"HSLA",\'" type="button" \').concat(c(t.interaction.hsla),\'>\\n            <input :arr="options" class="pcr-type" data-type="HSVA" value="\').concat(s?"HSV":"HSVA",\'" type="button" \').concat(c(t.interaction.hsva),\'>\\n            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" \').concat(c(t.interaction.cmyk),\'>\\n\\n            <input :ref="save" class="pcr-save" value="\').concat(e.save||"Save",\'" type="button" \').concat(c(t.interaction.save),\' aria-label="save and exit">\\n            <input :ref="cancel" class="pcr-cancel" value="\').concat(e.cancel||"Cancel",\'" type="button" \').concat(c(t.interaction.cancel),\' aria-label="cancel and exit">\\n            <input :ref="clear" class="pcr-clear" value="\').concat(e.clear||"Clear",\'" type="button" \').concat(c(t.interaction.clear),\' aria-label="clear and exit">\\n          </div>\\n        </div>\\n      </div>\\n    \')),l=a.interaction;return l.options.find(t=>!t.hidden&&!t.classList.add("active")),l.type=()=>l.options.find(t=>t.classList.contains("active")),a};function R(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class H{constructor(t){R(this,"_initializingActive",!0),R(this,"_recalc",!0),R(this,"_color",j()),R(this,"_lastColor",j()),R(this,"_swatchColors",[]),R(this,"_eventListener",{init:[],save:[],hide:[],show:[],clear:[],change:[],changestop:[],cancel:[],swatchselect:[]}),this.options=t=Object.assign({appClass:null,theme:"classic",useAsButton:!1,padding:8,disabled:!1,comparison:!0,closeOnScroll:!1,outputPrecision:0,lockOpacity:!1,autoReposition:!0,container:"body",components:{interaction:{}},strings:{},swatches:null,inline:!1,sliders:null,default:"#42445a",defaultRepresentation:null,position:"bottom-middle",adjustableNumbers:!0,showAlways:!1,closeWithKey:"Escape"},t);const{swatches:e,components:o,theme:n,sliders:i,lockOpacity:r,padding:s}=t;["nano","monolith"].includes(n)&&!i&&(t.sliders="h"),o.interaction||(o.interaction={});const{preview:c,opacity:a,hue:l,palette:p}=o;o.opacity=!r&&a,o.palette=p||c||a||l,this._preBuild(),this._buildComponents(),this._bindEvents(),this._finalBuild(),e&&e.length&&e.forEach(t=>this.addSwatch(t));const{button:u,app:h}=this._root;this._nanopop=P({reference:u,padding:s,el:h}),u.setAttribute("role","button"),u.setAttribute("aria-label","toggle color picker dialog");const d=this;requestAnimationFrame(function e(){if(!h.offsetWidth&&h.parentElement!==t.container)return requestAnimationFrame(e);d.setColor(t.default),d._rePositioningPicker(),t.defaultRepresentation&&(d._representation=t.defaultRepresentation,d.setColorRepresentation(d._representation)),t.showAlways&&d.show(),d._initializingActive=!1,d._emit("init")})}_preBuild(){const t=this.options;for(const e of["el","container"])t[e]=f(t[e]);this._root=B(t),t.useAsButton&&(this._root.button=t.el),t.container.appendChild(this._root.root)}_finalBuild(){const t=this.options,e=this._root;if(t.container.removeChild(e.root),t.inline){const o=t.el.parentElement;t.el.nextSibling?o.insertBefore(e.app,t.el.nextSibling):o.appendChild(e.app)}else t.container.appendChild(e.app);t.useAsButton?t.inline&&t.el.remove():t.el.parentNode.replaceChild(e.root,t.el),t.disabled&&this.disable(),t.comparison||(e.button.style.transition="none",t.useAsButton||(e.preview.lastColor.style.transition="none")),this.hide()}_buildComponents(){const t=this,e=this.options.components,o=(t.options.sliders||"v").repeat(2),[n,i]=o.match(/^[vh]+$/g)?o:[],r=()=>this._color||(this._color=this._lastColor.clone()),s={palette:E({element:t._root.palette.picker,wrapper:t._root.palette.palette,onstop:()=>t._emit("changestop",t),onchange(o,n){if(!e.palette)return;const i=r(),{_root:s,options:c}=t;t._recalc&&(i.s=100*o,i.v=100-100*n,i.v<0&&(i.v=0),t._updateOutput());const a=i.toRGBA().toString(0);this.element.style.background=a,this.wrapper.style.background="\\n                        linear-gradient(to top, rgba(0, 0, 0, ".concat(i.a,"), transparent),\\n                        linear-gradient(to left, hsla(").concat(i.h,", 100%, 50%, ").concat(i.a,"), rgba(255, 255, 255, ").concat(i.a,"))\\n                    "),c.comparison?c.useAsButton||t._lastColor||(s.preview.lastColor.style.color=a):s.button.style.color=a;const l=i.toHEXA().toString();for(const e of t._swatchColors){const{el:t,color:o}=e;t.classList[l===o.toHEXA().toString()?"add":"remove"]("pcr-active")}s.preview.currentColor.style.color=a,t.options.comparison||s.button.classList.remove("clear")}}),hue:E({lock:"v"===i?"h":"v",element:t._root.hue.picker,wrapper:t._root.hue.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.hue||!e.palette)return;const n=r();t._recalc&&(n.h=360*o),this.element.style.backgroundColor="hsl(".concat(n.h,", 100%, 50%)"),s.palette.trigger()}}),opacity:E({lock:"v"===n?"h":"v",element:t._root.opacity.picker,wrapper:t._root.opacity.slider,onstop:()=>t._emit("changestop",t),onchange(o){if(!e.opacity||!e.palette)return;const n=r();t._recalc&&(n.a=Math.round(100*o)/100),this.element.style.background="rgba(0, 0, 0, ".concat(n.a,")"),s.palette.trigger()}}),selectable:L({elements:t._root.interaction.options,className:"active",onchange(e){t._representation=e.target.getAttribute("data-type").toUpperCase(),t._recalc&&t._updateOutput()}})};this._components=s}_bindEvents(){const{_root:t,options:e}=this,o=[c(t.interaction.clear,"click",()=>this._clearColor()),c([t.interaction.cancel,t.preview.lastColor],"click",()=>{this._emit("cancel",this),this.setHSVA(...(this._lastColor||this._color).toHSVA(),!0)}),c(t.interaction.save,"click",()=>{!this.applyColor()&&!e.showAlways&&this.hide()}),c(t.interaction.result,["keyup","input"],t=>{this.setColor(t.target.value,!0)&&!this._initializingActive&&this._emit("change",this._color),t.stopImmediatePropagation()}),c(t.interaction.result,["focus","blur"],t=>{this._recalc="blur"===t.type,this._recalc&&this._updateOutput()}),c([t.palette.palette,t.palette.picker,t.hue.slider,t.hue.picker,t.opacity.slider,t.opacity.picker],["mousedown","touchstart"],()=>this._recalc=!0)];if(!e.showAlways){const n=e.closeWithKey;o.push(c(t.button,"click",()=>this.isOpen()?this.hide():this.show()),c(document,"keyup",t=>this.isOpen()&&(t.key===n||t.code===n)&&this.hide()),c(document,["touchstart","mousedown"],e=>{this.isOpen()&&!d(e).some(e=>e===t.app||e===t.button)&&this.hide()},{capture:!0}))}if(e.adjustableNumbers){const e={rgba:[255,255,255,1],hsva:[360,100,100,1],hsla:[360,100,100,1],cmyk:[100,100,100,100]};m(t.interaction.result,(t,o,n)=>{const i=e[this.getColorRepresentation().toLowerCase()];if(i){const e=i[n],r=t+(e>=100?1e3*o:o);return r<=0?0:Number((r<e?r:e).toPrecision(3))}return t})}if(e.autoReposition&&!e.inline){let t=null;const n=this;o.push(c(window,["scroll","resize"],()=>{n.isOpen()&&(e.closeOnScroll&&n.hide(),null===t?(t=setTimeout(()=>t=null,100),requestAnimationFrame(function e(){n._rePositioningPicker(),null!==t&&requestAnimationFrame(e)})):(clearTimeout(t),t=setTimeout(()=>t=null,100)))},{capture:!0}))}this._eventBindings=o}_rePositioningPicker(){const{options:t}=this;if(!t.inline){const{app:e}=this._root;matchMedia("(max-width: 576px)").matches?Object.assign(e.style,{margin:"auto",height:"".concat(e.getBoundingClientRect().height,"px"),top:0,bottom:0,left:0,right:0}):(Object.assign(e.style,{margin:null,right:null,top:null,bottom:null,left:null,height:null}),this._nanopop.update(t.position))}}_updateOutput(){const{_root:t,_color:e,options:o}=this;if(t.interaction.type()){const n="to".concat(t.interaction.type().getAttribute("data-type"));t.interaction.result.value="function"==typeof e[n]?e[n]().toString(o.outputPrecision):""}!this._initializingActive&&this._recalc&&this._emit("change",e)}_clearColor(t=!1){const{_root:e,options:o}=this;o.useAsButton||(e.button.style.color="rgba(0, 0, 0, 0.15)"),e.button.classList.add("clear"),o.showAlways||this.hide(),this._lastColor=null,this._initializingActive||t||(this._emit("save",null),this._emit("clear",this))}_parseLocalColor(t){const{values:e,type:o,a:n}=O(t),{lockOpacity:i}=this.options,r=void 0!==n&&1!==n;return e&&3===e.length&&(e[3]=void 0),{values:!e||i&&r?null:e,type:o}}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this))}on(t,e){return"function"==typeof e&&"string"==typeof t&&t in this._eventListener&&this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t];if(o){const t=o.indexOf(e);~t&&o.splice(t,1)}return this}addSwatch(t){const{values:e}=this._parseLocalColor(t);if(e){const{_swatchColors:t,_root:o}=this,n=j(...e),i=p(\'<button type="button" style="color: \'.concat(n.toRGBA().toString(0),\'" aria-label="color swatch"/>\'));return o.swatches.appendChild(i),t.push({el:i,color:n}),this._eventBindings.push(c(i,"click",()=>{this.setHSVA(...n.toHSVA(),!0),this._emit("swatchselect",n),this._emit("change",n)})),!0}return!1}removeSwatch(t){const e=this._swatchColors[t];if(e){const{el:o}=e;return this._root.swatches.removeChild(o),this._swatchColors.splice(t,1),!0}return!1}applyColor(t=!1){const{preview:e,button:o}=this._root,n=this._color.toRGBA().toString();e.lastColor.style.color=n,this.options.useAsButton||(o.style.color=n),o.classList.remove("clear"),this._lastColor=this._color.clone(),this._initializingActive||t||this._emit("save",this._color)}destroy(){this._eventBindings.forEach(t=>a(...t)),Object.keys(this._components).forEach(t=>this._components[t].destroy())}destroyAndRemove(){this.destroy();const{root:t,app:e}=this._root;t.parentElement&&t.parentElement.removeChild(t),e.parentElement.removeChild(e),Object.keys(this).forEach(t=>this[t]=null)}hide(){return this._root.app.classList.remove("visible"),this._emit("hide",this),this}show(){return this.options.disabled||(this._root.app.classList.add("visible"),this._rePositioningPicker(),this._emit("show",this)),this}isOpen(){return this._root.app.classList.contains("visible")}setHSVA(t=360,e=0,o=0,n=1,i=!1){const r=this._recalc;if(this._recalc=!1,t<0||t>360||e<0||e>100||o<0||o>100||n<0||n>1)return!1;this._color=j(t,e,o,n);const{hue:s,opacity:c,palette:a}=this._components;return s.update(t/360),c.update(n),a.update(e/100,1-o/100),i||this.applyColor(),r&&this._updateOutput(),this._recalc=r,!0}setColor(t,e=!1){if(null===t)return this._clearColor(e),!0;const{values:o,type:n}=this._parseLocalColor(t);if(o){const t=n.toUpperCase(),{options:i}=this._root.interaction,r=i.find(e=>e.getAttribute("data-type")===t);if(r&&!r.hidden)for(const t of i)t.classList[t===r?"add":"remove"]("active");return this.setColorRepresentation(t),this.setHSVA(...o,e)}return!1}setColorRepresentation(t){return t=t.toUpperCase(),!!this._root.interaction.options.find(e=>e.getAttribute("data-type").startsWith(t)&&!e.click())}getColorRepresentation(){return this._representation}getColor(){return this._color}getSelectedColor(){return this._lastColor}getRoot(){return this._root}disable(){return this.hide(),this.options.disabled=!0,this._root.button.classList.add("disabled"),this}enable(){return this.options.disabled=!1,this._root.button.classList.remove("disabled"),this}}H.utils=n,H.libs={HSVaColor:j,Moveable:E,Nanopop:P,Selectable:L},H.create=t=>new H(t),H.version="1.4.2";e.default=H}]).default});\n//# sourceMappingURL=pickr.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../webParticles/node_modules/@simonwep/pickr/dist/pickr.min.js\n')},"../webParticles/src/ts/shared/classes/Curve.ts":/*!******************************************************!*\
  !*** ../webParticles/src/ts/shared/classes/Curve.ts ***!
  \******************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Curve = (function () {\n    function Curve(canvas) {\n        this.noDOM = true;\n        if (canvas) {\n            this.noDOM = false;\n            this.canvas = canvas;\n            this.cw = canvas.width = 600;\n            this.ch = canvas.height = 300;\n            this.ctx = canvas.getContext(\'2d\');\n        }\n        this.points = [];\n        if (!this.noDOM) {\n            this.addPoint(0, 0);\n            this.addPoint(1, 1);\n            this.mouseX = 0;\n            this.mouseY = 0;\n            this.indicatorX = 0;\n            this.indicatorY = 0;\n            this.events = {};\n        }\n        this.lutResolution = 1000;\n        if (!this.noDOM) {\n            this.interactions();\n            this.draw();\n        }\n    }\n    Curve.prototype.hardInterpolation = function () {\n        var isPointSelected = false;\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            if (pt.selected) {\n                pt.cp1X = pt.x;\n                pt.cp1Y = pt.y;\n                pt.cp2X = pt.x;\n                pt.cp2Y = pt.y;\n                isPointSelected = true;\n            }\n        }\n        if (!isPointSelected) {\n            for (var _b = 0, _c = this.points; _b < _c.length; _b++) {\n                var pt = _c[_b];\n                pt.cp1X = pt.x;\n                pt.cp1Y = pt.y;\n                pt.cp2X = pt.x;\n                pt.cp2Y = pt.y;\n            }\n        }\n        this.draw();\n        this.createLUT();\n        this.events.onbuttonfunction ? this.events.onbuttonfunction() : null;\n    };\n    Curve.prototype.softInterpolation = function () {\n        var isPointSelected = false;\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            if (pt.selected) {\n                pt.cp1X = pt.x - 0.25;\n                pt.cp1Y = pt.y;\n                pt.cp2X = pt.x + 0.25;\n                pt.cp2Y = pt.y;\n                isPointSelected = true;\n            }\n        }\n        if (!isPointSelected) {\n            for (var _b = 0, _c = this.points; _b < _c.length; _b++) {\n                var pt = _c[_b];\n                pt.cp1X = pt.x - 0.25;\n                pt.cp1Y = pt.y;\n                pt.cp2X = pt.x + 0.25;\n                pt.cp2Y = pt.y;\n            }\n        }\n        this.draw();\n        this.createLUT();\n        this.events.onbuttonfunction ? this.events.onbuttonfunction() : null;\n    };\n    Curve.prototype.flipX = function () {\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            var dCp1X = pt.cp1X - pt.x;\n            var dCp1Y = pt.cp1Y - pt.y;\n            var dCp2X = pt.cp2X - pt.x;\n            var dCp2Y = pt.cp2Y - pt.y;\n            pt.x = -pt.x + 1;\n            pt.cp1X = pt.x - dCp2X;\n            pt.cp1Y = pt.y + dCp2Y;\n            pt.cp2X = pt.x - dCp1X;\n            pt.cp2Y = pt.y + dCp1Y;\n        }\n        this.points.sort(function (a, b) { return a.x - b.x; });\n        this.draw();\n        this.createLUT();\n        this.events.onbuttonfunction ? this.events.onbuttonfunction() : null;\n    };\n    Curve.prototype.flipY = function () {\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            var dCp1X = pt.cp1X - pt.x;\n            var dCp1Y = pt.cp1Y - pt.y;\n            var dCp2X = pt.cp2X - pt.x;\n            var dCp2Y = pt.cp2Y - pt.y;\n            pt.y = -pt.y + 1;\n            pt.cp1X = pt.x + dCp1X;\n            pt.cp1Y = pt.y - dCp1Y;\n            pt.cp2X = pt.x + dCp2X;\n            pt.cp2Y = pt.y - dCp2Y;\n        }\n        this.draw();\n        this.createLUT();\n        this.events.onbuttonfunction ? this.events.onbuttonfunction() : null;\n    };\n    Curve.prototype.resetLinear = function () {\n        this.points = [];\n        this.addPoint(0, 0);\n        this.addPoint(1, 1);\n        this.hardInterpolation();\n    };\n    Curve.prototype.resetEase = function () {\n        this.points = [];\n        this.addPoint(0, 0);\n        this.addPoint(1, 1);\n        this.softInterpolation();\n    };\n    Curve.prototype.getY = function (x) {\n        var tolerance = 1 / this.lutResolution;\n        var iMin = 0;\n        var iMax = this.lookupX.length - 1;\n        var key = Math.round((iMin + iMax) / 2);\n        var xTarget = x;\n        var xCurrent = this.lookupX[key];\n        var i = 0;\n        while (Math.abs(xTarget - xCurrent) > tolerance) {\n            i++;\n            if (xCurrent > xTarget) {\n                iMax = key;\n            }\n            else if (xCurrent < xTarget) {\n                iMin = key;\n            }\n            key = Math.round((iMin + iMax) / 2);\n            xCurrent = this.lookupX[key];\n            if (i > 100) {\n                break;\n            }\n        }\n        return this.lookupY[key];\n    };\n    Curve.prototype.createLUT = function () {\n        this.lookupX = [];\n        this.lookupY = [];\n        for (var i = 1; i < this.points.length; i++) {\n            var p1 = this.points[i - 1];\n            var p2 = this.points[i];\n            var pctRange = p2.x - p1.x;\n            for (var t = 0; t < 1; t += 1 / ((this.lutResolution) * pctRange)) {\n                var x = (Math.pow((1 - t), 3) * p1.x) + (3 * Math.pow((1 - t), 2) * t * p1.cp2X) + (3 * (1 - t) * Math.pow(t, 2) * p2.cp1X) + (Math.pow(t, 3) * p2.x);\n                var y = (Math.pow((1 - t), 3) * p1.y) + (3 * Math.pow((1 - t), 2) * t * p1.cp2Y) + (3 * (1 - t) * Math.pow(t, 2) * p2.cp1Y) + (Math.pow(t, 3) * p2.y);\n                this.lookupX.push(x);\n                this.lookupY.push(y);\n            }\n            if (i == this.points.length - 1) {\n                var x = (Math.pow((1 - 1), 3) * p1.x) + (3 * Math.pow((1 - 1), 2) * 1 * p1.cp2X) + (3 * (1 - 1) * Math.pow(1, 2) * p2.cp1X) + (Math.pow(1, 3) * p2.x);\n                var y = (Math.pow((1 - 1), 3) * p1.y) + (3 * Math.pow((1 - 1), 2) * 1 * p1.cp2Y) + (3 * (1 - 1) * Math.pow(1, 2) * p2.cp1Y) + (Math.pow(1, 3) * p2.y);\n                this.lookupX.push(x);\n                this.lookupY.push(y);\n            }\n        }\n    };\n    Curve.prototype.on = function (event, func) {\n        this.events[\'on\' + event] = func.bind(this);\n    };\n    Curve.prototype.interactions = function () {\n        var _this = this;\n        var x;\n        var y;\n        var hover = false;\n        window.addEventListener(\'tabChange\', function () {\n            if (_this.canvas.clientWidth > 0) {\n                _this.canvas.width = _this.cw = _this.canvas.clientWidth;\n                _this.canvas.height = _this.ch = _this.canvas.clientWidth / 2;\n                _this.draw();\n            }\n        });\n        window.addEventListener(\'resizeUI\', function () {\n            if (_this.canvas.clientWidth > 0) {\n                _this.canvas.width = _this.cw = _this.canvas.clientWidth;\n                _this.canvas.height = _this.ch = _this.canvas.clientWidth / 2;\n                _this.draw();\n            }\n        });\n        this.canvas.addEventListener(\'mousemove\', function (evt) {\n            var x = clamp(evt.offsetX, 0, _this.cw - 1);\n            var y = -1 * clamp(evt.offsetY, 0, _this.ch - 1) + Math.floor(_this.ch) - 1;\n            _this.mouseX = x / (Math.floor(_this.cw) - 1);\n            _this.mouseY = y / (Math.floor(_this.ch) - 1);\n            for (var _i = 0, _a = _this.points; _i < _a.length; _i++) {\n                var pt = _a[_i];\n                var ptX = pt.x * (_this.cw - 1);\n                var ptY = pt.y * (_this.ch - 1);\n                var cp1X = pt.cp1X * (_this.cw - 1);\n                var cp1Y = pt.cp1Y * (_this.ch - 1);\n                var cp2X = pt.cp2X * (_this.cw - 1);\n                var cp2Y = pt.cp2Y * (_this.ch - 1);\n                pt.hover = false;\n                pt.hoverCp1 = false;\n                pt.hoverCp2 = false;\n                var dist = (x - ptX) * (x - ptX) + (y - ptY) * (y - ptY);\n                if (dist <= 10 * 10) {\n                    pt.hover = true;\n                    break;\n                }\n                if (pt.selected) {\n                    var dist1 = (x - cp1X) * (x - cp1X) + (y - cp1Y) * (y - cp1Y);\n                    var dist2 = (x - cp2X) * (x - cp2X) + (y - cp2Y) * (y - cp2Y);\n                    if (dist1 <= 10 * 10) {\n                        pt.hoverCp1 = true;\n                        break;\n                    }\n                    if (dist2 <= 10 * 10) {\n                        pt.hoverCp2 = true;\n                        break;\n                    }\n                }\n            }\n            var isPointSelected = false;\n            for (var _b = 0, _c = _this.points; _b < _c.length; _b++) {\n                var pt = _c[_b];\n                if (pt.selected) {\n                    isPointSelected = true;\n                }\n            }\n            if (!isPointSelected) {\n                _this.indicatorX = _this.mouseX;\n                _this.indicatorY = _this.mouseY;\n            }\n            for (var _d = 0, _e = _this.points; _d < _e.length; _d++) {\n                var pt = _e[_d];\n                if (pt.movable || pt.movableCp1 || pt.movableCp2) {\n                    if (evt.altKey) {\n                        var deltaW = 1 / 20;\n                        var deltaH = 1 / 10;\n                        var posX = Math.floor((_this.mouseX + deltaW / 2) / deltaW);\n                        var posY = Math.floor((_this.mouseY + deltaH / 2) / deltaH);\n                        _this.mouseX = deltaW * posX;\n                        _this.mouseY = deltaH * posY;\n                    }\n                }\n                if (pt.movable) {\n                    var dCp1X = pt.cp1X - pt.x;\n                    var dCp1Y = pt.cp1Y - pt.y;\n                    var dCp2X = pt.cp2X - pt.x;\n                    var dCp2Y = pt.cp2Y - pt.y;\n                    pt.x = _this.mouseX;\n                    pt.y = _this.mouseY;\n                    pt.cp1X = pt.x + dCp1X;\n                    pt.cp1Y = pt.y + dCp1Y;\n                    pt.cp2X = pt.x + dCp2X;\n                    pt.cp2Y = pt.y + dCp2Y;\n                    _this.indicatorX = _this.mouseX;\n                    _this.indicatorY = _this.mouseY;\n                    _this.createLUT();\n                    _this.events.onpointmove ? _this.events.onpointmove() : null;\n                }\n                if (pt.movableCp1) {\n                    pt.cp1X = _this.mouseX;\n                    pt.cp1Y = _this.mouseY;\n                    var dCp1X = pt.cp1X - pt.x;\n                    var dCp1Y = pt.cp1Y - pt.y;\n                    if (!evt.shiftKey) {\n                        pt.cp2X = pt.x - dCp1X;\n                        pt.cp2Y = pt.y - dCp1Y;\n                    }\n                    _this.createLUT();\n                    _this.events.onpointmove ? _this.events.onpointmove() : null;\n                }\n                if (pt.movableCp2) {\n                    pt.cp2X = _this.mouseX;\n                    pt.cp2Y = _this.mouseY;\n                    var dCp2X = pt.cp2X - pt.x;\n                    var dCp2Y = pt.cp2Y - pt.y;\n                    if (!evt.shiftKey) {\n                        pt.cp1X = pt.x - dCp2X;\n                        pt.cp1Y = pt.y - dCp2Y;\n                    }\n                    _this.createLUT();\n                    _this.events.onpointmove ? _this.events.onpointmove() : null;\n                }\n            }\n            _this.points.sort(function (a, b) { return a.x - b.x; });\n            _this.draw();\n            _this.events.onmousemove ? _this.events.onmousemove() : null;\n        });\n        this.canvas.addEventListener(\'mousedown\', function (evt) {\n            var isPointSelected = false;\n            for (var _i = 0, _a = _this.points; _i < _a.length; _i++) {\n                var pt = _a[_i];\n                if (!pt.hover && !pt.hoverCp1 && !pt.hoverCp2) {\n                    pt.selected = false;\n                }\n                if (pt.hover) {\n                    pt.selected = true;\n                    pt.movable = true;\n                    _this.indicatorX = pt.x;\n                    _this.indicatorY = pt.y;\n                    _this.events.onpointselect ? _this.events.onpointselect() : null;\n                }\n                if (pt.hoverCp1) {\n                    pt.movableCp1 = true;\n                }\n                if (pt.hoverCp2) {\n                    pt.movableCp2 = true;\n                }\n                if (pt.selected)\n                    isPointSelected = true;\n            }\n            if (!isPointSelected) {\n                _this.indicatorX = _this.mouseX;\n                _this.indicatorY = _this.mouseY;\n                if (evt.ctrlKey) {\n                    var index = _this.addPoint(_this.mouseX, _this.mouseY);\n                    _this.points[index].hover = true;\n                    _this.points[index].selected = true;\n                    _this.points[index].movable = true;\n                    _this.createLUT();\n                    _this.events.onpointadd ? _this.events.onpointadd() : null;\n                }\n                _this.events.onpointdeselect ? _this.events.onpointdeselect() : null;\n            }\n            _this.draw();\n        });\n        this.canvas.addEventListener(\'mouseup\', function (evt) {\n            for (var _i = 0, _a = _this.points; _i < _a.length; _i++) {\n                var pt = _a[_i];\n                pt.movable = false;\n                pt.movableCp1 = false;\n                pt.movableCp2 = false;\n            }\n        });\n        this.canvas.addEventListener(\'mouseleave\', function (evt) {\n            for (var _i = 0, _a = _this.points; _i < _a.length; _i++) {\n                var pt = _a[_i];\n                pt.movable = false;\n                pt.movableCp1 = false;\n                pt.movableCp2 = false;\n            }\n        });\n        this.canvas.addEventListener(\'contextmenu\', function (evt) {\n            evt.preventDefault();\n            if (_this.points.length <= 1)\n                return;\n            for (var _i = 0, _a = _this.points; _i < _a.length; _i++) {\n                var pt = _a[_i];\n                if (pt.selected) {\n                    _this.points.splice(_this.points.indexOf(pt), 1);\n                }\n            }\n            _this.points.sort(function (a, b) { return a.x - b.x; });\n            _this.draw();\n            _this.createLUT();\n            _this.events.onpointdelete ? _this.events.onpointdelete() : null;\n        });\n    };\n    Curve.prototype.import = function (pointArr) {\n        this.points = [];\n        for (var _i = 0, pointArr_1 = pointArr; _i < pointArr_1.length; _i++) {\n            var pt = pointArr_1[_i];\n            var i = this.addPoint(pt.x, pt.y);\n            if (pt.cp1X)\n                this.points[i].cp1X = pt.cp1X;\n            if (pt.cp1Y)\n                this.points[i].cp1Y = pt.cp1Y;\n            if (pt.cp2X)\n                this.points[i].cp2X = pt.cp2X;\n            if (pt.cp2Y)\n                this.points[i].cp2Y = pt.cp2Y;\n        }\n        this.createLUT();\n        if (!this.noDOM) {\n            this.draw();\n        }\n    };\n    Curve.prototype.export = function () {\n        var pointArr = [];\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            pointArr.push({\n                x: pt.x,\n                y: pt.y,\n                cp1X: pt.cp1X,\n                cp1Y: pt.cp1Y,\n                cp2X: pt.cp2X,\n                cp2Y: pt.cp2Y\n            });\n        }\n        return pointArr;\n    };\n    Curve.prototype.addPoint = function (x, y) {\n        this.points.push({\n            x: x,\n            y: y,\n            cp1X: x - 0.25,\n            cp1Y: y,\n            cp2X: x + 0.25,\n            cp2Y: y,\n            hover: false,\n            hoverCp1: false,\n            hoverCp2: false,\n            selected: false,\n            movable: false,\n            movableCp1: false,\n            movableCp2: false\n        });\n        this.points.sort(function (a, b) { return a.x - b.x; });\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            if (x == pt.x && y == pt.y) {\n                return this.points.indexOf(pt);\n            }\n        }\n    };\n    Curve.prototype.setSelectedPoint = function (x, y) {\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            if (pt.selected) {\n                var dCp1X = pt.cp1X - pt.x;\n                var dCp1Y = pt.cp1Y - pt.y;\n                var dCp2X = pt.cp2X - pt.x;\n                var dCp2Y = pt.cp2Y - pt.y;\n                pt.x = x;\n                pt.y = y;\n                pt.cp1X = pt.x + dCp1X;\n                pt.cp1Y = pt.y + dCp1Y;\n                pt.cp2X = pt.x + dCp2X;\n                pt.cp2Y = pt.y + dCp2Y;\n                this.indicatorX = x;\n                this.indicatorY = y;\n            }\n        }\n        this.points.sort(function (a, b) { return a.x - b.x; });\n        this.draw();\n        this.createLUT();\n        this.events.onpointmove ? this.events.onpointmove() : null;\n    };\n    Curve.prototype.draw = function () {\n        this.ctx.clearRect(0, 0, this.cw, this.ch);\n        this.drawGrid();\n        this.drawCurve();\n        this.drawPoints();\n    };\n    Curve.prototype.drawGrid = function () {\n        this.ctx.strokeStyle = \'#666666\';\n        this.ctx.lineWidth = .25;\n        for (var i = 1; i < 20; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo((this.cw / 20) * i - 0.5, 0);\n            this.ctx.lineTo((this.cw / 20) * i - 0.5, this.ch);\n            this.ctx.stroke();\n        }\n        for (var i = 1; i < 10; i++) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, (this.ch / 10) * i - 0.5);\n            this.ctx.lineTo(this.cw, (this.ch / 10) * i - 0.5);\n            this.ctx.stroke();\n        }\n    };\n    Curve.prototype.drawCurve = function () {\n        this.ctx.strokeStyle = \'#CCCCCC\';\n        this.ctx.lineWidth = 1.5;\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, (-this.points[0].y + 1) * this.ch);\n        this.ctx.lineTo(this.points[0].x * this.cw, (-this.points[0].y + 1) * this.ch);\n        for (var i = 1; i < this.points.length; i++) {\n            var ptX = this.points[i].x * this.cw;\n            var ptY = (-this.points[i].y + 1) * this.ch;\n            var cp1X = this.points[i].cp1X * this.cw;\n            var cp1Y = (-this.points[i].cp1Y + 1) * this.ch;\n            var prevCp2X = this.points[i - 1].cp2X * this.cw;\n            var prevCp2Y = (-this.points[i - 1].cp2Y + 1) * this.ch;\n            this.ctx.bezierCurveTo(prevCp2X, prevCp2Y, cp1X, cp1Y, ptX, ptY);\n        }\n        this.ctx.lineTo(this.cw, (-this.points[this.points.length - 1].y + 1) * this.ch);\n        this.ctx.stroke();\n    };\n    Curve.prototype.drawPoints = function () {\n        for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n            var pt = _a[_i];\n            var ptX = pt.x * this.cw;\n            var ptY = (-pt.y + 1) * this.ch;\n            var cp1X = pt.cp1X * this.cw;\n            var cp1Y = (-pt.cp1Y + 1) * this.ch;\n            var cp2X = pt.cp2X * this.cw;\n            var cp2Y = (-pt.cp2Y + 1) * this.ch;\n            if (pt.selected) {\n                this.ctx.lineWidth = 0.5;\n                this.ctx.beginPath();\n                this.ctx.moveTo(ptX, ptY);\n                this.ctx.lineTo(cp1X, cp1Y);\n                this.ctx.stroke();\n                this.ctx.beginPath();\n                this.ctx.moveTo(ptX, ptY);\n                this.ctx.lineTo(cp2X, cp2Y);\n                this.ctx.stroke();\n            }\n            this.ctx.fillStyle = \'#33AAFF\';\n            if (pt.hover) {\n                this.ctx.fillStyle = \'#66CCFF\';\n            }\n            this.ctx.beginPath();\n            this.ctx.arc(ptX, ptY, 4, 0, Math.PI * 2, false);\n            this.ctx.closePath();\n            this.ctx.fill();\n            if (pt.selected) {\n                this.ctx.fillStyle = \'#33AAFF\';\n                if (pt.hover || pt.hoverCp1) {\n                    this.ctx.fillStyle = \'#66CCFF\';\n                }\n                this.ctx.beginPath();\n                this.ctx.arc(cp1X, cp1Y, 3, 0, Math.PI * 2, false);\n                this.ctx.closePath();\n                this.ctx.fill();\n                this.ctx.fillStyle = \'#33AAFF\';\n                if (pt.hover || pt.hoverCp2) {\n                    this.ctx.fillStyle = \'#66CCFF\';\n                }\n                this.ctx.beginPath();\n                this.ctx.arc(cp2X, cp2Y, 3, 0, Math.PI * 2, false);\n                this.ctx.closePath();\n                this.ctx.fill();\n            }\n        }\n    };\n    return Curve;\n}());\nexports.default = Curve;\nfunction clamp(val, min, max) {\n    if (val < min) {\n        val = min;\n    }\n    if (val > max) {\n        val = max;\n    }\n    return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../webParticles/src/ts/shared/classes/Curve.ts\n')},"../webParticles/src/ts/shared/classes/Gradient.ts":/*!*********************************************************!*\
  !*** ../webParticles/src/ts/shared/classes/Gradient.ts ***!
  \*********************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Pickr;\nvar Gradient = (function () {\n    function Gradient(gradientDiv) {\n        this.noDOM = true;\n        if (gradientDiv) {\n            this.noDOM = false;\n            Pickr = __webpack_require__(/*! @simonwep/pickr */ "../webParticles/node_modules/@simonwep/pickr/dist/pickr.min.js");\n            this.gradientDiv = gradientDiv;\n        }\n        this.knots = [];\n        if (!this.noDOM) {\n            this.addKnot(0);\n            this.mouseX = 0;\n            this.indicatorX = 0;\n            this.events = {};\n            this.interactions();\n        }\n    }\n    Gradient.prototype.export = function () {\n        var knotArr = [];\n        for (var _i = 0, _a = this.knots; _i < _a.length; _i++) {\n            var kt = _a[_i];\n            knotArr.push({\n                position: kt.position,\n                color: kt.color\n            });\n        }\n        return knotArr;\n    };\n    Gradient.prototype.import = function (knotArr) {\n        this.knots = [];\n        if (this.noDOM) {\n            for (var _i = 0, knotArr_1 = knotArr; _i < knotArr_1.length; _i++) {\n                var kt = knotArr_1[_i];\n                var c = void 0;\n                if (kt.color) {\n                    c = kt.color;\n                }\n                else {\n                    c = [51, 170, 255];\n                }\n                var knot = {\n                    position: kt.position,\n                    color: c,\n                    hover: false,\n                    selected: false,\n                    movable: false,\n                };\n                this.knots.push(knot);\n            }\n        }\n        else {\n            this.gradientDiv.innerHTML = \'\';\n            for (var _a = 0, knotArr_2 = knotArr; _a < knotArr_2.length; _a++) {\n                var kt = knotArr_2[_a];\n                this.addKnot(kt.position, kt.color);\n            }\n        }\n        this.knots.sort(function (a, b) { return a.position - b.position; });\n    };\n    Gradient.prototype.getColor = function (position) {\n        var color = [];\n        if (this.knots.length == 1) {\n            color = this.knots[0].color;\n        }\n        else {\n            if (position <= this.knots[0].position) {\n                color = this.knots[0].color;\n            }\n            else if (position >= this.knots[this.knots.length - 1].position) {\n                color = this.knots[this.knots.length - 1].color;\n            }\n            else {\n                for (var i = 1; i < this.knots.length; i++) {\n                    var prevKt = this.knots[i - 1];\n                    var kt = this.knots[i];\n                    if (position > prevKt.position && position < kt.position) {\n                        var weight = (position - prevKt.position) / (kt.position - prevKt.position);\n                        color[0] = prevKt.color[0] + (kt.color[0] - prevKt.color[0]) * weight;\n                        color[1] = prevKt.color[1] + (kt.color[1] - prevKt.color[1]) * weight;\n                        color[2] = prevKt.color[2] + (kt.color[2] - prevKt.color[2]) * weight;\n                    }\n                }\n            }\n        }\n        return color;\n    };\n    Gradient.prototype.addKnot = function (position, color) {\n        var _this = this;\n        var c = [];\n        if (color) {\n            c = color;\n        }\n        else {\n            if (this.knots.length <= 0) {\n                c = [51, 170, 255];\n            }\n            else {\n                c = this.getColor(position);\n            }\n        }\n        var knotDiv = document.createElement(\'div\');\n        knotDiv.className = \'knot\';\n        knotDiv.style.left = position * 100 + \'%\';\n        knotDiv.onmouseenter = function () {\n            knot.hover = true;\n        };\n        knotDiv.onmouseleave = function () {\n            knot.hover = false;\n        };\n        knotDiv.oncontextmenu = function (evt) {\n            evt.preventDefault();\n            if (_this.knots.length <= 1)\n                return;\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                if (kt.selected) {\n                    kt.div.parentElement.removeChild(kt.div);\n                    _this.knots.splice(_this.knots.indexOf(kt), 1);\n                }\n            }\n            _this.calculateGradient();\n            _this.events.onknotdelete ? _this.events.onknotdelete() : null;\n        };\n        var el1 = document.createElement(\'div\');\n        el1.className = \'el1\';\n        el1.style.borderBottomColor = \'rgb(\' + c[0] + \', \' + c[1] + \', \' + c[2] + \')\';\n        var el2 = document.createElement(\'div\');\n        el2.className = \'el2\';\n        el2.style.backgroundColor = \'rgb(\' + c[0] + \', \' + c[1] + \', \' + c[2] + \')\';\n        knotDiv.appendChild(el1);\n        knotDiv.appendChild(el2);\n        this.gradientDiv.appendChild(knotDiv);\n        var knot = {\n            position: position,\n            color: c,\n            hover: false,\n            selected: false,\n            movable: false,\n            div: knotDiv\n        };\n        knotDiv.ondblclick = function () {\n            var pickr = Pickr.create({\n                el: knotDiv,\n                useAsButton: true,\n                closeOnScroll: false,\n                lockOpacity: true,\n                default: \'rgb(\' + knot.color[0] + \', \' + knot.color[1] + \', \' + knot.color[2] + \')\',\n                position: \'top-end\',\n                theme: \'nano\',\n                appClass: \'pickerCustomize\',\n                components: {\n                    preview: false,\n                    opacity: false,\n                    hue: true,\n                    interaction: {\n                        hex: true,\n                        rgba: true,\n                        hsla: false,\n                        hsva: true,\n                        cmyk: false,\n                        input: true,\n                        clear: false,\n                        save: false\n                    }\n                }\n            });\n            requestAnimationFrame(function () { return pickr.show(); });\n            pickr.on(\'hide\', function () {\n                setTimeout(function () {\n                    pickr.destroyAndRemove();\n                }, 500);\n            });\n            pickr.on(\'change\', function (color) {\n                var c = color.toRGBA();\n                el1.style.borderBottomColor = c.toString();\n                el2.style.backgroundColor = c.toString();\n                knot.color = [c[0], c[1], c[2]];\n                _this.calculateGradient();\n                _this.events.oncolorchange ? _this.events.oncolorchange() : null;\n            });\n        };\n        this.knots.push(knot);\n        this.knots.sort(function (a, b) { return a.position - b.position; });\n        this.calculateGradient();\n        return this.knots.indexOf(knot);\n    };\n    Gradient.prototype.calculateGradient = function () {\n        var gradientString;\n        if (this.knots.length > 1) {\n            gradientString = \'linear-gradient(to right\';\n            for (var _i = 0, _a = this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                gradientString += \', rgb(\' + kt.color[0] + \', \' + kt.color[1] + \', \' + kt.color[2] + \') \' + kt.position * 100 + \'%\';\n            }\n            gradientString += \')\';\n            this.gradientDiv.style.background = gradientString;\n        }\n        else {\n            gradientString = \'rgb(\' + this.knots[0].color[0] + \', \' + this.knots[0].color[1] + \', \' + this.knots[0].color[2] + \')\';\n            this.gradientDiv.style.background = gradientString;\n        }\n    };\n    Gradient.prototype.on = function (event, func) {\n        this.events[\'on\' + event] = func.bind(this);\n    };\n    Gradient.prototype.setSelectedKnot = function (p) {\n        for (var _i = 0, _a = this.knots; _i < _a.length; _i++) {\n            var kt = _a[_i];\n            if (kt.selected) {\n                kt.position = p;\n                kt.div.style.left = p * 100 + \'%\';\n                this.indicatorX = p;\n                this.events.onknotmove ? this.events.onknotmove() : null;\n            }\n        }\n        this.knots.sort(function (a, b) { return a.position - b.position; });\n    };\n    Gradient.prototype.interactions = function () {\n        var _this = this;\n        var dragStartX = 0;\n        var startPosition = 0;\n        this.gradientDiv.addEventListener(\'mousemove\', function (evt) {\n            _this.mouseX = clamp((evt.clientX - _this.gradientDiv.getBoundingClientRect().left) / (_this.gradientDiv.clientWidth - 1), 0, 1);\n            var isPointSelected = false;\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                if (kt.selected) {\n                    isPointSelected = true;\n                }\n            }\n            if (!isPointSelected) {\n                _this.indicatorX = _this.mouseX;\n            }\n            _this.events.onmousemove ? _this.events.onmousemove() : null;\n        });\n        this.gradientDiv.addEventListener(\'mousedown\', function (evt) {\n            var isPointSelected = false;\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                if (kt.selected) {\n                    isPointSelected = true;\n                }\n            }\n            if (!isPointSelected) {\n                if (evt.ctrlKey) {\n                    var index = _this.addKnot(_this.mouseX);\n                    _this.events.onknotadd ? _this.events.onknotadd() : null;\n                }\n            }\n        });\n        this.gradientDiv.parentElement.addEventListener(\'mousemove\', function (evt) {\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                if (kt.movable) {\n                    var pct = (evt.clientX - dragStartX) / _this.gradientDiv.clientWidth;\n                    kt.position = clamp(startPosition + pct, 0, 1);\n                    kt.div.style.left = kt.position * 100 + \'%\';\n                    _this.indicatorX = kt.position;\n                    _this.calculateGradient();\n                    _this.events.onknotmove ? _this.events.onknotmove() : null;\n                }\n            }\n            _this.knots.sort(function (a, b) { return a.position - b.position; });\n        });\n        this.gradientDiv.parentElement.addEventListener(\'mousedown\', function (evt) {\n            var isPointSelected = false;\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                if (!kt.hover) {\n                    kt.selected = false;\n                    kt.div.className = \'knot\';\n                }\n                if (kt.hover) {\n                    kt.selected = true;\n                    kt.movable = true;\n                    kt.div.className += \' selected\';\n                    _this.indicatorX = kt.position;\n                    dragStartX = evt.clientX;\n                    startPosition = kt.position;\n                    _this.events.onknotselect ? _this.events.onknotselect() : null;\n                }\n                if (kt.selected)\n                    isPointSelected = true;\n            }\n            if (!isPointSelected) {\n                _this.indicatorX = _this.mouseX;\n                _this.events.onknotdeselect ? _this.events.onknotdeselect() : null;\n            }\n        });\n        this.gradientDiv.parentElement.addEventListener(\'mouseup\', function (evt) {\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                kt.movable = false;\n            }\n        });\n        this.gradientDiv.parentElement.addEventListener(\'mouseleave\', function (evt) {\n            for (var _i = 0, _a = _this.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                kt.movable = false;\n            }\n        });\n    };\n    return Gradient;\n}());\nexports.default = Gradient;\nfunction clamp(val, min, max) {\n    if (val < min) {\n        val = min;\n    }\n    if (val > max) {\n        val = max;\n    }\n    return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../webParticles/src/ts/shared/classes/Gradient.ts\n')},"../webParticles/src/ts/ui_thread/values/CheckboxValue.ts":/*!****************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/CheckboxValue.ts ***!
  \****************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar CheckboxValue = (function (_super) {\n    __extends(CheckboxValue, _super);\n    function CheckboxValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.labelDiv = el.children[0].children[0];\n        _this.checkboxDiv = el.children[0].children[2].children[0];\n        _this.value = _this.checkboxDiv.checked ? true : false;\n        _this.interactions();\n        return _this;\n    }\n    CheckboxValue.prototype.interactions = function () {\n        var _this = this;\n        this.element.onclick = function () {\n            _this.checkboxDiv.checked = !_this.checkboxDiv.checked;\n            _this.checkboxDiv.indeterminate = false;\n            _this.valueChange(true);\n        };\n    };\n    CheckboxValue.prototype.setUI = function (value) {\n        if (typeof value == \'string\') {\n            this.checkboxDiv.checked = false;\n            this.checkboxDiv.indeterminate = true;\n        }\n        if (typeof value == \'boolean\') {\n            this.checkboxDiv.checked = value;\n            this.checkboxDiv.indeterminate = false;\n        }\n        this.valueChange(false);\n    };\n    CheckboxValue.prototype.setValue = function (value) {\n        this.setUI(value);\n        this.valueChange(true);\n    };\n    CheckboxValue.prototype.valueChange = function (triggerChangeEvent) {\n        this.previousValues.unshift(this.value);\n        if (this.previousValues.length > 10)\n            this.previousValues.pop();\n        this.value = this.checkboxDiv.checked ? true : false;\n        if (triggerChangeEvent) {\n            this.events.onchange ? this.events.onchange() : null;\n        }\n        for (var _i = 0, _a = this.dependants; _i < _a.length; _i++) {\n            var d = _a[_i];\n            d.activationFunction();\n        }\n    };\n    return CheckboxValue;\n}(Value_1.default));\nexports.default = CheckboxValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL0NoZWNrYm94VmFsdWUudHM/Y2VhNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxR0FBMkI7QUFFM0I7SUFBMkMsaUNBQUs7SUFPNUMsdUJBQVksRUFBVztRQUF2QixZQUNJLGtCQUFNLEVBQUUsQ0FBQyxTQVFaO1FBTkcsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQWdCO1FBQ3pELEtBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBcUI7UUFFN0UsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFckQsS0FBSSxDQUFDLFlBQVksRUFBRTs7SUFDdkIsQ0FBQztJQUVELG9DQUFZLEdBQVo7UUFBQSxpQkFXQztRQVRHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHO1lBRW5CLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO1lBQ3BELEtBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLEtBQUs7WUFFdEMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFMUIsQ0FBQztJQUVMLENBQUM7SUFFRCw2QkFBSyxHQUFMLFVBQU0sS0FBdUI7UUFFekIsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsS0FBSztZQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxJQUFJO1NBQ3hDO1FBQ0QsSUFBSSxPQUFPLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEdBQUcsS0FBSztZQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxLQUFLO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFFM0IsQ0FBQztJQUVELGdDQUFRLEdBQVIsVUFBUyxLQUFjO1FBRW5CLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBRTFCLENBQUM7SUFFRCxtQ0FBVyxHQUFYLFVBQVksa0JBQTJCO1FBR25DLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUU7UUFHOUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFckQsSUFBSSxrQkFBa0IsRUFBRTtZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2RDtRQUdELEtBQWMsVUFBZSxFQUFmLFNBQUksQ0FBQyxVQUFVLEVBQWYsY0FBZSxFQUFmLElBQWU7WUFBeEIsSUFBSSxDQUFDO1lBQXFCLENBQUMsQ0FBQyxrQkFBa0IsRUFBRTtTQUFBO0lBRXpELENBQUM7SUFDTCxvQkFBQztBQUFELENBQUMsQ0FyRTBDLGVBQUssR0FxRS9DIiwiZmlsZSI6Ii4uL3dlYlBhcnRpY2xlcy9zcmMvdHMvdWlfdGhyZWFkL3ZhbHVlcy9DaGVja2JveFZhbHVlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZhbHVlIGZyb20gJy4vVmFsdWUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrYm94VmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG5cbiAgICB2YWx1ZTogYm9vbGVhblxuXG4gICAgbGFiZWxEaXY6IEhUTUxFbGVtZW50XG4gICAgY2hlY2tib3hEaXY6IEhUTUxJbnB1dEVsZW1lbnRcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudCkge1xuICAgICAgICBzdXBlcihlbClcblxuICAgICAgICB0aGlzLmxhYmVsRGl2ID0gZWwuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0gYXMgSFRNTEVsZW1lbnRcbiAgICAgICAgdGhpcy5jaGVja2JveERpdiA9IGVsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzJdLmNoaWxkcmVuWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnRcblxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5jaGVja2JveERpdi5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25zKClcbiAgICB9XG5cbiAgICBpbnRlcmFjdGlvbnMoKSB7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uY2xpY2sgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hEaXYuY2hlY2tlZCA9ICF0aGlzLmNoZWNrYm94RGl2LmNoZWNrZWRcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hEaXYuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlXG5cbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2UodHJ1ZSlcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBzZXRVSSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hEaXYuY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94RGl2LmluZGV0ZXJtaW5hdGUgPSB0cnVlXG4gICAgICAgIH0gXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94RGl2LmNoZWNrZWQgPSB2YWx1ZVxuICAgICAgICAgICAgdGhpcy5jaGVja2JveERpdi5pbmRldGVybWluYXRlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlKGZhbHNlKVxuXG4gICAgfVxuXG4gICAgc2V0VmFsdWUodmFsdWU6IGJvb2xlYW4pIHtcblxuICAgICAgICB0aGlzLnNldFVJKHZhbHVlKVxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlKHRydWUpXG5cbiAgICB9XG5cbiAgICB2YWx1ZUNoYW5nZSh0cmlnZ2VyQ2hhbmdlRXZlbnQ6IGJvb2xlYW4pIHtcblxuICAgICAgICAvLyBTdG9yZSBQcmV2aW91cyBWYWx1ZVxuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWVzLnVuc2hpZnQodGhpcy52YWx1ZSlcbiAgICAgICAgaWYgKHRoaXMucHJldmlvdXNWYWx1ZXMubGVuZ3RoID4gMTApIHRoaXMucHJldmlvdXNWYWx1ZXMucG9wKClcblxuICAgICAgICAvLyBVcGRhdGUgVmFsdWVcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2hlY2tib3hEaXYuY2hlY2tlZCA/IHRydWUgOiBmYWxzZTtcblxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5vbmNoYW5nZSA/IHRoaXMuZXZlbnRzLm9uY2hhbmdlKCkgOiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFVwZGF0ZSBEZXBlbmRhbnRzXG4gICAgICAgIGZvciAobGV0IGQgb2YgdGhpcy5kZXBlbmRhbnRzKSBkLmFjdGl2YXRpb25GdW5jdGlvbigpXG5cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/CheckboxValue.ts\n')},"../webParticles/src/ts/ui_thread/values/CurveValue.ts":/*!*************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/CurveValue.ts ***!
  \*************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar Curve_1 = __webpack_require__(/*! ../../shared/classes/Curve */ "../webParticles/src/ts/shared/classes/Curve.ts");\nvar CurveValue = (function (_super) {\n    __extends(CurveValue, _super);\n    function CurveValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.labelDiv = el.children[0].children[0];\n        _this.curveDiv = el.children[0].children[2];\n        _this.curve = new Curve_1.default(_this.curveDiv);\n        _this.value = _this.curve;\n        _this.currentValueLabelDivX = el.children[0].children[1].children[0];\n        _this.currentValueLabelDivY = el.children[0].children[1].children[4];\n        _this.currentValueDivX = el.children[0].children[1].children[1];\n        _this.currentValueDivY = el.children[0].children[1].children[5];\n        _this.indicatorXMin = el.children[0].children[4].children[0];\n        _this.indicatorXLabel = el.children[0].children[4].children[1];\n        _this.indicatorXMax = el.children[0].children[4].children[2];\n        _this.indicatorYMin = el.children[0].children[3].children[2];\n        _this.indicatorYLabel = el.children[0].children[3].children[1];\n        _this.indicatorYMax = el.children[0].children[3].children[0];\n        _this.hardInterpolationBtn = el.children[2].children[0].children[0];\n        _this.softInterpolationBtn = el.children[2].children[0].children[1];\n        _this.flipXBtn = el.children[2].children[1].children[0];\n        _this.flipYBtn = el.children[2].children[1].children[1];\n        _this.resetLinearBtn = el.children[2].children[2].children[0];\n        _this.resetEaseBtn = el.children[2].children[2].children[1];\n        _this.interactions();\n        return _this;\n    }\n    CurveValue.prototype.interactions = function () {\n        var _this = this;\n        this.currentValueLabelDivX.onclick = function () {\n            _this.currentValueDivX.focus();\n            _this.currentValueDivX.select();\n        };\n        this.currentValueLabelDivY.onclick = function () {\n            _this.currentValueDivY.focus();\n            _this.currentValueDivY.select();\n        };\n        this.currentValueDivX.oninput = function () {\n            var v = _this.textInputFilter(_this.currentValueDivX.value, _this.indicatorXDependency.dataType);\n            _this.currentValueDivX.value = v + \'\';\n            if (typeof v == \'number\') {\n                var valuesX = __spreadArrays(_this.indicatorXDependency.value);\n                var valuesY = __spreadArrays(_this.indicatorYDependency.value);\n                valuesX.sort(function (a, b) { return a - b; });\n                valuesY.sort(function (a, b) { return a - b; });\n                var minX = valuesX[0] < 0 ? valuesX[0] : 0;\n                var maxX = valuesX[1];\n                var minY = valuesY[0] < 0 ? valuesY[0] : 0;\n                var maxY = valuesY[1];\n                var x = Math.abs((minX - v) / (maxX - minX));\n                var y = Math.abs((minY - parseFloat(_this.currentValueDivY.value)) / (maxY - minY));\n                _this.curve.setSelectedPoint(x, y);\n            }\n        };\n        this.currentValueDivY.oninput = function () {\n            var v = _this.textInputFilter(_this.currentValueDivY.value, _this.indicatorYDependency.dataType);\n            _this.currentValueDivY.value = v + \'\';\n            if (typeof v == \'number\') {\n                var valuesX = __spreadArrays(_this.indicatorXDependency.value);\n                var valuesY = __spreadArrays(_this.indicatorYDependency.value);\n                valuesX.sort(function (a, b) { return a - b; });\n                valuesY.sort(function (a, b) { return a - b; });\n                var minX = valuesX[0] < 0 ? valuesX[0] : 0;\n                var maxX = valuesX[1];\n                var minY = valuesY[0] < 0 ? valuesY[0] : 0;\n                var maxY = valuesY[1];\n                var x = Math.abs((minX - parseFloat(_this.currentValueDivX.value)) / (maxX - minX));\n                var y = Math.abs((minY - v) / (maxY - minY));\n                _this.curve.setSelectedPoint(x, y);\n            }\n        };\n        this.hardInterpolationBtn.onclick = this.curve.hardInterpolation.bind(this.curve);\n        this.softInterpolationBtn.onclick = this.curve.softInterpolation.bind(this.curve);\n        this.flipXBtn.onclick = this.curve.flipX.bind(this.curve);\n        this.flipYBtn.onclick = this.curve.flipY.bind(this.curve);\n        this.resetLinearBtn.onclick = this.curve.resetLinear.bind(this.curve);\n        this.resetEaseBtn.onclick = this.curve.resetEase.bind(this.curve);\n        this.curve.on(\'mousemove\', function () { return _this.updateCurrentValue(); });\n        this.curve.on(\'pointselect\', function () { return _this.updateCurrentValue(); });\n        this.curve.on(\'pointdeselect\', function () { return _this.updateCurrentValue(); });\n        this.curve.on(\'pointmove\', function () { return _this.valueChange(); });\n        this.curve.on(\'pointadd\', function () { return _this.valueChange(); });\n        this.curve.on(\'pointdelete\', function () { return _this.valueChange(); });\n        this.curve.on(\'buttonfunction\', function () { return _this.valueChange(); });\n    };\n    CurveValue.prototype.updateCurrentValue = function () {\n        if (this.indicatorXDependency.valueDiv1.value != \'multiple\') {\n            var valuesX = __spreadArrays(this.indicatorXDependency.value);\n            valuesX.sort(function (a, b) { return a - b; });\n            var minX = valuesX[0] < 0 ? valuesX[0] : 0;\n            var maxX = valuesX[1];\n            this.currentValueDivX.value = (minX + Math.round(this.curve.indicatorX * (maxX - minX) * 100) / 100).toFixed(2);\n            this.currentValueDivX.nextElementSibling.textContent = this.indicatorXDependency.suffixDiv.textContent;\n        }\n        else {\n            this.currentValueDivX.value = \'multiple\';\n            this.currentValueDivX.nextElementSibling.textContent = this.indicatorXDependency.suffixDiv.textContent;\n        }\n        if (this.indicatorYDependency.valueDiv1.value != \'multiple\') {\n            var valuesY = __spreadArrays(this.indicatorYDependency.value);\n            valuesY.sort(function (a, b) { return a - b; });\n            var minY = valuesY[0] < 0 ? valuesY[0] : 0;\n            var maxY = valuesY[1];\n            this.currentValueDivY.value = (minY + Math.round(this.curve.indicatorY * (maxY - minY) * 100) / 100).toFixed(2);\n            this.currentValueDivY.nextElementSibling.textContent = this.indicatorYDependency.suffixDiv.textContent;\n        }\n        else {\n            this.currentValueDivY.value = \'multiple\';\n            this.currentValueDivY.nextElementSibling.textContent = this.indicatorYDependency.suffixDiv.textContent;\n        }\n    };\n    CurveValue.prototype.updateIndicators = function () {\n        var valuesX = __spreadArrays(this.indicatorXDependency.value);\n        var valuesY = __spreadArrays(this.indicatorYDependency.value);\n        valuesX.sort(function (a, b) { return a - b; });\n        valuesY.sort(function (a, b) { return a - b; });\n        valuesX = this.indicatorXDependency.valueDiv1.value == \'multiple\' ? [\'multiple\', \'multiple\'] : valuesX;\n        valuesY = this.indicatorYDependency.valueDiv1.value == \'multiple\' ? [\'multiple\', \'multiple\'] : valuesY;\n        this.indicatorXMin.textContent = \'0 \' + this.indicatorXDependency.suffixDiv.textContent;\n        this.indicatorXMax.textContent = valuesX[1] + \' \' + this.indicatorXDependency.suffixDiv.textContent;\n        this.indicatorYMin.textContent = \'0 \' + this.indicatorYDependency.suffixDiv.textContent;\n        this.indicatorYLabel.textContent = this.indicatorYDependency.label;\n        this.indicatorYMax.textContent = valuesY[1] + \' \' + this.indicatorYDependency.suffixDiv.textContent;\n    };\n    CurveValue.prototype.setUI = function (value) {\n        this.curve.import(value);\n    };\n    CurveValue.prototype.setValue = function (value) {\n        this.setUI(value);\n        this.valueChange();\n    };\n    CurveValue.prototype.valueChange = function () {\n        this.curve.createLUT();\n        this.events.onchange ? this.events.onchange() : null;\n    };\n    return CurveValue;\n}(Value_1.default));\nexports.default = CurveValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/CurveValue.ts\n')},"../webParticles/src/ts/ui_thread/values/GradientValue.ts":/*!****************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/GradientValue.ts ***!
  \****************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar Gradient_1 = __webpack_require__(/*! ../../shared/classes/Gradient */ "../webParticles/src/ts/shared/classes/Gradient.ts");\nvar GradientValue = (function (_super) {\n    __extends(GradientValue, _super);\n    function GradientValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.extendable = _this.element.getAttribute(\'extendable\') == \'true\' ? true : false;\n        _this.labelDiv = el.children[0].children[0];\n        _this.value = [];\n        _this.gradientGroups = [];\n        if (_this.extendable) {\n            _this.addGradientButton = el.children[0].children[1];\n            var gradientDiv = el.children[0].children[3];\n            var gradient = new Gradient_1.default(gradientDiv);\n            _this.gradientGroups.push({\n                gradient: gradient,\n                gradientDiv: gradientDiv,\n                gradientContainer: el.children[0],\n                currentValueLabelDiv: el.children[0].children[2].children[0],\n                currentValueDiv: el.children[0].children[2].children[1]\n            });\n            _this.value.push(gradient);\n        }\n        else {\n            var gradientDiv = el.children[0].children[2];\n            var gradient = new Gradient_1.default(gradientDiv);\n            _this.gradientGroups.push({\n                gradient: gradient,\n                gradientDiv: gradientDiv,\n                gradientContainer: el.children[0],\n                currentValueLabelDiv: el.children[0].children[1].children[0],\n                currentValueDiv: el.children[0].children[1].children[1]\n            });\n            _this.value.push(gradient);\n        }\n        _this.interactions();\n        return _this;\n    }\n    GradientValue.prototype.interactions = function () {\n        var _this = this;\n        if (this.extendable) {\n            this.addGradientButton.onclick = this.addGradientDiv.bind(this, true);\n        }\n        this.gradientGroups[0].currentValueLabelDiv.onmousedown = function (evt) {\n            evt.stopPropagation();\n        };\n        this.gradientGroups[0].currentValueLabelDiv.onclick = function () {\n            _this.gradientGroups[0].currentValueDiv.focus();\n            _this.gradientGroups[0].currentValueDiv.select();\n        };\n        this.gradientGroups[0].currentValueDiv.oninput = function () {\n            var v = _this.textInputFilter(_this.gradientGroups[0].currentValueDiv.value, \'uFloat\');\n            _this.gradientGroups[0].currentValueDiv.value = v + \'\';\n            if (typeof v == \'number\') {\n                _this.gradientGroups[0].gradient.setSelectedKnot(v / 100);\n            }\n        };\n        this.gradientGroups[0].gradient.on(\'mousemove\', function () { return _this.updateCurrentValue(_this.gradientGroups[0].currentValueDiv, _this.gradientGroups[0].gradient); });\n        this.gradientGroups[0].gradient.on(\'knotdeselect\', function () { return _this.updateCurrentValue(_this.gradientGroups[0].currentValueDiv, _this.gradientGroups[0].gradient); });\n        this.gradientGroups[0].gradient.on(\'knotmove\', function () { return _this.valueChange(); });\n        this.gradientGroups[0].gradient.on(\'knotadd\', function () { return _this.valueChange(); });\n        this.gradientGroups[0].gradient.on(\'knotdelete\', function () { return _this.valueChange(); });\n        this.gradientGroups[0].gradient.on(\'colorchange\', function () { return _this.valueChange(); });\n    };\n    GradientValue.prototype.updateCurrentValue = function (currentValueDiv, gradient) {\n        currentValueDiv.value = (Math.round(gradient.indicatorX * 10000) / 100).toFixed(2);\n    };\n    GradientValue.prototype.addGradientDiv = function (triggerValueChange) {\n        var _this = this;\n        var container = document.createElement(\'div\');\n        container.className = \'fillGradient\';\n        var seperator = document.createElement(\'div\');\n        seperator.className = \'seperator\';\n        var gradientDiv = document.createElement(\'div\');\n        gradientDiv.className = \'gradient\';\n        var curVal = document.createElement(\'div\');\n        curVal.className = \'currentValue\';\n        var label = document.createElement(\'div\');\n        label.className = \'label small\';\n        label.textContent = \'Knot Position\';\n        label.onmousedown = function (evt) {\n            evt.stopPropagation();\n        };\n        label.onclick = function () {\n            input.focus();\n            input.select();\n        };\n        var input = document.createElement(\'input\');\n        input.type = \'text\';\n        input.value = \'0\';\n        input.className = \'value\';\n        input.oninput = function () {\n            var v = _this.textInputFilter(input.value, \'uFloat\');\n            input.value = v + \'\';\n            if (typeof v == \'number\') {\n                gradient.setSelectedKnot(v / 100);\n            }\n        };\n        var suffix = document.createElement(\'div\');\n        suffix.className = \'suffix\';\n        suffix.textContent = \'%\';\n        var btn = document.createElement(\'div\');\n        btn.className = \'removeColor\';\n        btn.onclick = function () {\n            _this.element.removeChild(gradientDiv.parentElement.previousElementSibling);\n            _this.element.removeChild(gradientDiv.parentElement);\n            var currentIndex = _this.gradientGroups.indexOf(gradientGroup);\n            _this.value.splice(currentIndex, 1);\n            _this.gradientGroups.splice(currentIndex, 1);\n            _this.valueChange();\n        };\n        curVal.appendChild(label);\n        curVal.appendChild(input);\n        curVal.appendChild(suffix);\n        curVal.appendChild(btn);\n        container.appendChild(curVal);\n        container.appendChild(gradientDiv);\n        this.element.appendChild(seperator);\n        this.element.appendChild(container);\n        var gradient = new Gradient_1.default(gradientDiv);\n        gradient.on(\'mousemove\', function () { return _this.updateCurrentValue(input, gradient); });\n        gradient.on(\'knotselect\', function () { return _this.updateCurrentValue(input, gradient); });\n        gradient.on(\'knotdeselect\', function () { return _this.updateCurrentValue(input, gradient); });\n        gradient.on(\'knotmove\', function () { return _this.valueChange(); });\n        gradient.on(\'knotadd\', function () { return _this.valueChange(); });\n        gradient.on(\'knotdelete\', function () { return _this.valueChange(); });\n        gradient.on(\'colorchange\', function () { return _this.valueChange(); });\n        var gradientGroup = {\n            gradient: gradient,\n            gradientDiv: gradientDiv,\n            gradientContainer: container,\n            removeGradientButton: btn,\n            currentValueLabelDiv: label,\n            currentValueDiv: input\n        };\n        this.gradientGroups.push(gradientGroup);\n        this.value.push(gradient);\n        if (triggerValueChange) {\n            this.valueChange();\n        }\n    };\n    GradientValue.prototype.setUI = function (value) {\n        var initColor = this.gradientGroups[0].gradientDiv.style.background;\n        this.gradientGroups[0].gradientDiv.style.backgroundColor = "";\n        this.gradientGroups[0].gradientDiv.style.backgroundImage = "";\n        this.gradientGroups[0].gradientDiv.style.backgroundSize = "";\n        this.gradientGroups[0].gradientDiv.style.backgroundPosition = "";\n        for (var i = this.gradientGroups.length - 1; i >= 1; i--) {\n            this.element.removeChild(this.gradientGroups[i].gradientDiv.parentElement.previousElementSibling);\n            this.element.removeChild(this.gradientGroups[i].gradientDiv.parentElement);\n            this.value.splice(i, 1);\n            this.gradientGroups.splice(i, 1);\n        }\n        if (typeof value !== \'string\') {\n            var v = value;\n            for (var i = 0; i < value.length; i++) {\n                if (i >= 1)\n                    this.addGradientDiv(false);\n                var gg = this.gradientGroups[i];\n                gg.gradient.import(v[i]);\n            }\n        }\n        if (typeof value === \'string\') {\n            this.gradientGroups[0].gradientDiv.style.backgroundColor = initColor;\n            this.gradientGroups[0].gradientDiv.style.backgroundImage = "linear-gradient(45deg, #222 25%, transparent 25%, transparent 75%, #222 75%, #222), linear-gradient(45deg, #222 25%, transparent 25%, transparent 75%, #222 75%, #222";\n            this.gradientGroups[0].gradientDiv.style.backgroundSize = "10px 10px";\n            this.gradientGroups[0].gradientDiv.style.backgroundPosition = "0 0, 5px 5px";\n            for (var _i = 0, _a = this.gradientGroups[0].gradient.knots; _i < _a.length; _i++) {\n                var kt = _a[_i];\n                kt.div.parentElement.removeChild(kt.div);\n                this.gradientGroups[0].gradient.knots.splice(this.gradientGroups[0].gradient.knots.indexOf(kt), 1);\n            }\n        }\n    };\n    GradientValue.prototype.setValue = function (value) {\n        this.setUI(value);\n        this.valueChange();\n    };\n    GradientValue.prototype.valueChange = function () {\n        this.events.onchange ? this.events.onchange() : null;\n    };\n    return GradientValue;\n}(Value_1.default));\nexports.default = GradientValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/GradientValue.ts\n')},"../webParticles/src/ts/ui_thread/values/RangeValue.ts":/*!*************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/RangeValue.ts ***!
  \*************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar RangeValue = (function (_super) {\n    __extends(RangeValue, _super);\n    function RangeValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.labelDiv = el.children[0].children[0];\n        _this.suffixDiv = el.children[0].children[5];\n        _this.sliderDiv1 = el.children[0].children[2];\n        _this.valueDiv1 = el.children[0].children[4];\n        _this.sliderDiv2 = el.children[0].children[6];\n        _this.valueDiv2 = el.children[0].children[8];\n        _this.valueRangeDiv = el.children[0].children[10];\n        _this.dependentCurves = [];\n        _this.value = [\n            parseFloat(_this.valueDiv1.value),\n            parseFloat(_this.valueDiv2.value)\n        ];\n        _this.interactions();\n        return _this;\n    }\n    RangeValue.prototype.interactions = function () {\n        var _this = this;\n        this.labelDiv.onclick = function () {\n            _this.valueDiv1.focus();\n            _this.valueDiv1.select();\n        };\n        this.sliderDiv1.oninput = function () {\n            _this.valueDiv1.value = _this.sliderDiv1.value;\n            var diff = _this.value[1] - _this.value[0];\n            _this.sliderDiv2.value = parseFloat(_this.sliderDiv1.value) + diff + \'\';\n            _this.valueDiv2.value = parseFloat(_this.sliderDiv1.value) + diff + \'\';\n            _this.valueChange(true);\n        };\n        this.valueDiv1.oninput = function () {\n            var v = _this.textInputFilter(_this.valueDiv1.value);\n            _this.valueDiv1.value = v + \'\';\n            if (typeof v === \'number\') {\n                var diff = _this.value[1] - _this.value[0];\n                _this.sliderDiv2.value = v + diff + \'\';\n                _this.valueDiv2.value = v + diff + \'\';\n                _this.valueChange(true);\n                _this.sliderDiv1.value = v + \'\';\n            }\n        };\n        this.valueDiv1.onblur = function () {\n            _this.valueDiv1.value = _this.value[0] + \'\';\n        };\n        this.sliderDiv2.oninput = function () {\n            _this.valueDiv2.value = _this.sliderDiv2.value;\n            _this.valueChange(true);\n        };\n        this.valueDiv2.oninput = function () {\n            var v = _this.textInputFilter(_this.valueDiv2.value);\n            _this.valueDiv2.value = v + \'\';\n            if (typeof v == \'number\') {\n                _this.valueChange(true);\n                _this.sliderDiv2.value = v + \'\';\n            }\n        };\n        this.valueDiv2.onblur = function () {\n            _this.valueDiv2.value = _this.value[1] + \'\';\n        };\n    };\n    RangeValue.prototype.setUI = function (values) {\n        if (typeof values == \'string\') {\n            this.sliderDiv1.value = \'multiple\';\n            this.valueDiv1.value = \'multiple\';\n            this.sliderDiv2.value = \'multiple\';\n            this.valueDiv2.value = \'multiple\';\n        }\n        if (typeof values == \'object\') {\n            var value1 = values[0];\n            var value2 = values[1];\n            this.sliderDiv1.value = value1 + \'\';\n            this.valueDiv1.value = Math.round(value1 * 100) / 100 + \'\';\n            this.sliderDiv2.value = value2 + \'\';\n            this.valueDiv2.value = Math.round(value2 * 100) / 100 + \'\';\n        }\n        this.valueChange(false);\n    };\n    RangeValue.prototype.setValue = function (values) {\n        this.setUI(values);\n        this.valueChange(true);\n    };\n    RangeValue.prototype.valueChange = function (triggerChangeEvent) {\n        if (this.valueDiv1.value != \'multiple\') {\n            this.value = [\n                parseFloat(this.valueDiv1.value),\n                parseFloat(this.valueDiv2.value)\n            ];\n        }\n        if (triggerChangeEvent) {\n            this.events.onchange ? this.events.onchange() : null;\n        }\n        for (var _i = 0, _a = this.dependants; _i < _a.length; _i++) {\n            var d = _a[_i];\n            d.activationFunction();\n        }\n        for (var _b = 0, _c = this.dependentCurves; _b < _c.length; _b++) {\n            var d = _c[_b];\n            d.updateIndicators();\n            d.updateCurrentValue();\n        }\n        var values = __spreadArrays(this.value);\n        values.sort(function (a, b) { return a - b; });\n        if (this.valueDiv1.value == \'multiple\') {\n            this.valueRangeDiv.textContent = \'multiple \' + this.suffixDiv.textContent;\n        }\n        else {\n            if (values[0] == values[1]) {\n                this.valueRangeDiv.textContent = values[0] + \' \' + this.suffixDiv.textContent;\n            }\n            else {\n                this.valueRangeDiv.textContent = values[0] + \' to \' + values[1] + \' \' + this.suffixDiv.textContent;\n            }\n        }\n    };\n    return RangeValue;\n}(Value_1.default));\nexports.default = RangeValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/RangeValue.ts\n')},"../webParticles/src/ts/ui_thread/values/SliderValue.ts":/*!**************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/SliderValue.ts ***!
  \**************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar SliderValue = (function (_super) {\n    __extends(SliderValue, _super);\n    function SliderValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.labelDiv = el.children[0].children[0];\n        _this.sliderDiv = el.children[0].children[2];\n        _this.valueDiv = el.children[0].children[4];\n        _this.value = parseFloat(_this.valueDiv.value);\n        _this.interactions();\n        return _this;\n    }\n    SliderValue.prototype.interactions = function () {\n        var _this = this;\n        this.labelDiv.onclick = function () {\n            _this.valueDiv.focus();\n            _this.valueDiv.select();\n        };\n        this.sliderDiv.oninput = function () {\n            _this.valueDiv.value = _this.sliderDiv.value;\n            _this.valueChange(true);\n        };\n        this.valueDiv.oninput = function () {\n            var v = _this.textInputFilter(_this.valueDiv.value);\n            _this.valueDiv.value = v + \'\';\n            if (typeof v == \'number\') {\n                _this.valueChange(true);\n                _this.sliderDiv.value = v + \'\';\n            }\n        };\n        this.valueDiv.onblur = function () {\n            _this.valueDiv.value = _this.value + \'\';\n        };\n    };\n    SliderValue.prototype.setUI = function (value) {\n        if (typeof value == \'string\') {\n            this.sliderDiv.value = \'multiple\';\n            this.valueDiv.value = \'multiple\';\n        }\n        if (typeof value == \'number\') {\n            this.sliderDiv.value = value + \'\';\n            this.valueDiv.value = Math.round(value * 100) / 100 + \'\';\n        }\n        this.valueChange(false);\n    };\n    SliderValue.prototype.setValue = function (value) {\n        this.setUI(value);\n        this.valueChange(true);\n    };\n    SliderValue.prototype.valueChange = function (triggerChangeEvent) {\n        this.previousValues.unshift(this.value);\n        if (this.previousValues.length > 10)\n            this.previousValues.pop();\n        this.value = parseFloat(this.valueDiv.value);\n        if (triggerChangeEvent) {\n            this.events.onchange ? this.events.onchange() : null;\n        }\n        for (var _i = 0, _a = this.dependants; _i < _a.length; _i++) {\n            var d = _a[_i];\n            d.activationFunction();\n        }\n    };\n    return SliderValue;\n}(Value_1.default));\nexports.default = SliderValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1NsaWRlclZhbHVlLnRzPzQ1ODciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUdBQTJCO0FBRTNCO0lBQXlDLCtCQUFLO0lBUTFDLHFCQUFZLEVBQVc7UUFBdkIsWUFDSSxrQkFBTSxFQUFFLENBQUMsU0FTWjtRQVBHLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFnQjtRQUN6RCxLQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBcUI7UUFDL0QsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQXFCO1FBRTlELEtBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBRTVDLEtBQUksQ0FBQyxZQUFZLEVBQUU7O0lBQ3ZCLENBQUM7SUFFRCxrQ0FBWSxHQUFaO1FBQUEsaUJBb0NDO1FBbENHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHO1lBRXBCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3JCLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1FBRTFCLENBQUM7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRztZQUVyQixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUs7WUFDMUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFFMUIsQ0FBQztRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHO1lBRXBCLElBQUksQ0FBQyxHQUFHLEtBQUksQ0FBQyxlQUFlLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDakQsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFFNUIsSUFBSSxPQUFPLENBQUMsSUFBSSxRQUFRLEVBQUU7Z0JBRXRCLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUN0QixLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRTthQUVoQztRQUVMLENBQUM7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRztZQUVuQixLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFFekMsQ0FBQztJQUVMLENBQUM7SUFFRCwyQkFBSyxHQUFMLFVBQU0sS0FBc0I7UUFFeEIsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVTtZQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxVQUFVO1NBQ25DO1FBQ0QsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUMsR0FBRyxDQUFDLEdBQUMsR0FBRyxHQUFHLEVBQUU7U0FDdkQ7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztJQUUzQixDQUFDO0lBRUQsOEJBQVEsR0FBUixVQUFTLEtBQWE7UUFFbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFFMUIsQ0FBQztJQUVELGlDQUFXLEdBQVgsVUFBWSxrQkFBMkI7UUFHbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEVBQUU7WUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRTtRQUc5RCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUU1QyxJQUFJLGtCQUFrQixFQUFFO1lBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQ3ZEO1FBR0QsS0FBYyxVQUFlLEVBQWYsU0FBSSxDQUFDLFVBQVUsRUFBZixjQUFlLEVBQWYsSUFBZTtZQUF4QixJQUFJLENBQUM7WUFBcUIsQ0FBQyxDQUFDLGtCQUFrQixFQUFFO1NBQUE7SUFFekQsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0FBQyxDQWhHd0MsZUFBSyxHQWdHN0MiLCJmaWxlIjoiLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1NsaWRlclZhbHVlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZhbHVlIGZyb20gJy4vVmFsdWUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlclZhbHVlIGV4dGVuZHMgVmFsdWUge1xuXG4gICAgdmFsdWU6IG51bWJlclxuXG4gICAgbGFiZWxEaXY6IEhUTUxFbGVtZW50XG4gICAgc2xpZGVyRGl2OiBIVE1MSW5wdXRFbGVtZW50XG4gICAgdmFsdWVEaXY6IEhUTUxJbnB1dEVsZW1lbnRcblxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKGVsKVxuXG4gICAgICAgIHRoaXMubGFiZWxEaXYgPSBlbC5jaGlsZHJlblswXS5jaGlsZHJlblswXSBhcyBIVE1MRWxlbWVudFxuICAgICAgICB0aGlzLnNsaWRlckRpdiA9IGVsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzJdIGFzIEhUTUxJbnB1dEVsZW1lbnRcbiAgICAgICAgdGhpcy52YWx1ZURpdiA9IGVsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzRdIGFzIEhUTUxJbnB1dEVsZW1lbnRcblxuICAgICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh0aGlzLnZhbHVlRGl2LnZhbHVlKVxuXG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25zKClcbiAgICB9XG5cbiAgICBpbnRlcmFjdGlvbnMoKSB7XG5cbiAgICAgICAgdGhpcy5sYWJlbERpdi5vbmNsaWNrID0gKCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnZhbHVlRGl2LmZvY3VzKClcbiAgICAgICAgICAgIHRoaXMudmFsdWVEaXYuc2VsZWN0KClcblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zbGlkZXJEaXYub25pbnB1dCA9ICgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi52YWx1ZSA9IHRoaXMuc2xpZGVyRGl2LnZhbHVlXG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlKHRydWUpXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWVEaXYub25pbnB1dCA9ICgpID0+IHtcblxuICAgICAgICAgICAgbGV0IHYgPSB0aGlzLnRleHRJbnB1dEZpbHRlcih0aGlzLnZhbHVlRGl2LnZhbHVlKVxuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi52YWx1ZSA9IHYgKyAnJ1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHYgPT0gJ251bWJlcicpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2UodHJ1ZSlcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlckRpdi52YWx1ZSA9IHYgKyAnJ1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWVEaXYub25ibHVyID0gKCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLnZhbHVlRGl2LnZhbHVlID0gdGhpcy52YWx1ZSArICcnXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgc2V0VUkodmFsdWU6IG51bWJlciB8IHN0cmluZykge1xuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuc2xpZGVyRGl2LnZhbHVlID0gJ211bHRpcGxlJ1xuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi52YWx1ZSA9ICdtdWx0aXBsZSdcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLnNsaWRlckRpdi52YWx1ZSA9IHZhbHVlICsgJydcbiAgICAgICAgICAgIHRoaXMudmFsdWVEaXYudmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKjEwMCkvMTAwICsgJydcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlKGZhbHNlKVxuXG4gICAgfVxuXG4gICAgc2V0VmFsdWUodmFsdWU6IG51bWJlcikge1xuXG4gICAgICAgIHRoaXMuc2V0VUkodmFsdWUpXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UodHJ1ZSlcblxuICAgIH1cblxuICAgIHZhbHVlQ2hhbmdlKHRyaWdnZXJDaGFuZ2VFdmVudDogYm9vbGVhbikge1xuXG4gICAgICAgIC8vIFN0b3JlIFByZXZpb3VzIFZhbHVlXG4gICAgICAgIHRoaXMucHJldmlvdXNWYWx1ZXMudW5zaGlmdCh0aGlzLnZhbHVlKVxuICAgICAgICBpZiAodGhpcy5wcmV2aW91c1ZhbHVlcy5sZW5ndGggPiAxMCkgdGhpcy5wcmV2aW91c1ZhbHVlcy5wb3AoKVxuXG4gICAgICAgIC8vIFVwZGF0ZSBWYWx1ZVxuICAgICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh0aGlzLnZhbHVlRGl2LnZhbHVlKVxuXG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLm9uY2hhbmdlID8gdGhpcy5ldmVudHMub25jaGFuZ2UoKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIERlcGVuZGFudHNcbiAgICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLmRlcGVuZGFudHMpIGQuYWN0aXZhdGlvbkZ1bmN0aW9uKClcblxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/SliderValue.ts\n')},"../webParticles/src/ts/ui_thread/values/TextValue.ts":/*!************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/TextValue.ts ***!
  \************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar TextValue = (function (_super) {\n    __extends(TextValue, _super);\n    function TextValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.labelDiv = el.children[0].children[0];\n        _this.valueDiv = el.children[0].children[2];\n        _this.value = parseFloat(_this.valueDiv.value);\n        _this.interactions();\n        return _this;\n    }\n    TextValue.prototype.interactions = function () {\n        var _this = this;\n        this.labelDiv.onclick = function () {\n            _this.valueDiv.focus();\n            _this.valueDiv.select();\n        };\n        this.valueDiv.oninput = function (evt) {\n            var v = _this.textInputFilter(_this.valueDiv.value);\n            _this.valueDiv.value = v + \'\';\n            if (typeof v == \'number\') {\n                _this.valueChange(true);\n            }\n        };\n        this.valueDiv.onblur = function () {\n            _this.valueDiv.value = _this.value + \'\';\n        };\n    };\n    TextValue.prototype.setUI = function (value) {\n        if (typeof value === \'string\') {\n            this.valueDiv.value = value;\n        }\n        if (typeof value === \'number\') {\n            this.valueDiv.value = Math.round(value * 100) / 100 + \'\';\n        }\n        this.valueChange(false);\n    };\n    TextValue.prototype.setValue = function (value) {\n        this.setUI(value);\n        this.valueChange(true);\n    };\n    TextValue.prototype.valueChange = function (triggerChangeEvent) {\n        this.previousValues.unshift(this.value);\n        if (this.previousValues.length > 10)\n            this.previousValues.pop();\n        this.value = parseFloat(this.valueDiv.value);\n        if (triggerChangeEvent) {\n            this.events.onchange ? this.events.onchange() : null;\n        }\n        for (var _i = 0, _a = this.dependants; _i < _a.length; _i++) {\n            var d = _a[_i];\n            d.activationFunction();\n        }\n    };\n    return TextValue;\n}(Value_1.default));\nexports.default = TextValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1RleHRWYWx1ZS50cz85NTNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFHQUEyQjtBQUUzQjtJQUF1Qyw2QkFBSztJQU94QyxtQkFBWSxFQUFXO1FBQXZCLFlBQ0ksa0JBQU0sRUFBRSxDQUFDLFNBUVo7UUFORyxLQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBZ0I7UUFDekQsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQXFCO1FBRTlELEtBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBRTVDLEtBQUksQ0FBQyxZQUFZLEVBQUU7O0lBQ3ZCLENBQUM7SUFFRCxnQ0FBWSxHQUFaO1FBQUEsaUJBNEJDO1FBMUJHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHO1lBRXBCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ3JCLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1FBRTFCLENBQUM7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxVQUFDLEdBQUc7WUFFeEIsSUFBSSxDQUFDLEdBQUcsS0FBSSxDQUFDLGVBQWUsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNqRCxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUU1QixJQUFJLE9BQU8sQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFFdEIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7YUFFekI7UUFFTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUc7WUFFbkIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLEtBQUssR0FBRyxFQUFFO1FBRXpDLENBQUM7SUFFTCxDQUFDO0lBRUQseUJBQUssR0FBTCxVQUFNLEtBQXNCO1FBRXhCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUs7U0FDOUI7UUFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBQyxHQUFHLENBQUMsR0FBQyxHQUFHLEdBQUcsRUFBRTtTQUN2RDtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO0lBRTNCLENBQUM7SUFFRCw0QkFBUSxHQUFSLFVBQVMsS0FBc0I7UUFFM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFFMUIsQ0FBQztJQUVELCtCQUFXLEdBQVgsVUFBWSxrQkFBMkI7UUFHbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEVBQUU7WUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRTtRQUc5RCxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUU1QyxJQUFJLGtCQUFrQixFQUFFO1lBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQ3ZEO1FBR0QsS0FBYyxVQUFlLEVBQWYsU0FBSSxDQUFDLFVBQVUsRUFBZixjQUFlLEVBQWYsSUFBZTtZQUF4QixJQUFJLENBQUM7WUFBcUIsQ0FBQyxDQUFDLGtCQUFrQixFQUFFO1NBQUE7SUFFekQsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FBQyxDQXBGc0MsZUFBSyxHQW9GM0MiLCJmaWxlIjoiLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1RleHRWYWx1ZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWYWx1ZSBmcm9tICcuL1ZhbHVlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0VmFsdWUgZXh0ZW5kcyBWYWx1ZSB7XG5cbiAgICB2YWx1ZTogbnVtYmVyXG5cbiAgICBsYWJlbERpdjogSFRNTEVsZW1lbnRcbiAgICB2YWx1ZURpdjogSFRNTElucHV0RWxlbWVudFxuXG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoZWwpXG5cbiAgICAgICAgdGhpcy5sYWJlbERpdiA9IGVsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdIGFzIEhUTUxFbGVtZW50XG4gICAgICAgIHRoaXMudmFsdWVEaXYgPSBlbC5jaGlsZHJlblswXS5jaGlsZHJlblsyXSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHBhcnNlRmxvYXQodGhpcy52YWx1ZURpdi52YWx1ZSlcblxuICAgICAgICB0aGlzLmludGVyYWN0aW9ucygpXG4gICAgfVxuXG4gICAgaW50ZXJhY3Rpb25zKCkge1xuXG4gICAgICAgIHRoaXMubGFiZWxEaXYub25jbGljayA9ICgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi5mb2N1cygpXG4gICAgICAgICAgICB0aGlzLnZhbHVlRGl2LnNlbGVjdCgpXG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWVEaXYub25pbnB1dCA9IChldnQpID0+IHtcblxuICAgICAgICAgICAgbGV0IHYgPSB0aGlzLnRleHRJbnB1dEZpbHRlcih0aGlzLnZhbHVlRGl2LnZhbHVlKVxuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi52YWx1ZSA9IHYgKyAnJ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodHlwZW9mIHYgPT0gJ251bWJlcicpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2UodHJ1ZSlcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZhbHVlRGl2Lm9uYmx1ciA9ICgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi52YWx1ZSA9IHRoaXMudmFsdWUgKyAnJ1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHNldFVJKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZURpdi52YWx1ZSA9IHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVEaXYudmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKjEwMCkvMTAwICsgJydcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlKGZhbHNlKVxuXG4gICAgfVxuXG4gICAgc2V0VmFsdWUodmFsdWU6IG51bWJlciB8IHN0cmluZykge1xuXG4gICAgICAgIHRoaXMuc2V0VUkodmFsdWUpXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UodHJ1ZSlcblxuICAgIH1cblxuICAgIHZhbHVlQ2hhbmdlKHRyaWdnZXJDaGFuZ2VFdmVudDogYm9vbGVhbikge1xuXG4gICAgICAgIC8vIFN0b3JlIFByZXZpb3VzIFZhbHVlXG4gICAgICAgIHRoaXMucHJldmlvdXNWYWx1ZXMudW5zaGlmdCh0aGlzLnZhbHVlKVxuICAgICAgICBpZiAodGhpcy5wcmV2aW91c1ZhbHVlcy5sZW5ndGggPiAxMCkgdGhpcy5wcmV2aW91c1ZhbHVlcy5wb3AoKVxuXG4gICAgICAgIC8vIFVwZGF0ZSBWYWx1ZVxuICAgICAgICB0aGlzLnZhbHVlID0gcGFyc2VGbG9hdCh0aGlzLnZhbHVlRGl2LnZhbHVlKVxuXG4gICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLm9uY2hhbmdlID8gdGhpcy5ldmVudHMub25jaGFuZ2UoKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIERlcGVuZGFudHNcbiAgICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLmRlcGVuZGFudHMpIGQuYWN0aXZhdGlvbkZ1bmN0aW9uKClcblxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/TextValue.ts\n')},"../webParticles/src/ts/ui_thread/values/ToggleValue.ts":/*!**************************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/ToggleValue.ts ***!
  \**************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value_1 = __webpack_require__(/*! ./Value */ "../webParticles/src/ts/ui_thread/values/Value.ts");\nvar ToggleValue = (function (_super) {\n    __extends(ToggleValue, _super);\n    function ToggleValue(el) {\n        var _this = _super.call(this, el) || this;\n        _this.labelDiv = el.children[0].children[0];\n        _this.checkboxDiv = el.children[0].children[2].children[0];\n        _this.value = _this.checkboxDiv.checked ? 1 : 0;\n        _this.optionDivs = [\n            el.children[0].children[1],\n            el.children[0].children[3]\n        ];\n        _this.interactions();\n        return _this;\n    }\n    ToggleValue.prototype.interactions = function () {\n        var _this = this;\n        this.element.onclick = function () {\n            _this.checkboxDiv.indeterminate = false;\n            _this.checkboxDiv.checked = !_this.checkboxDiv.checked;\n            _this.valueChange(true);\n        };\n    };\n    ToggleValue.prototype.setUI = function (value) {\n        if (typeof value == \'string\') {\n            this.checkboxDiv.checked = false;\n            this.checkboxDiv.indeterminate = true;\n        }\n        else {\n            this.checkboxDiv.checked = value == 1 ? true : false;\n            this.checkboxDiv.indeterminate = false;\n        }\n        this.valueChange(false);\n    };\n    ToggleValue.prototype.setValue = function (value) {\n        this.setUI(value);\n        this.valueChange(true);\n    };\n    ToggleValue.prototype.valueChange = function (triggerChangeEvent) {\n        this.previousValues.unshift(this.value);\n        if (this.previousValues.length > 10)\n            this.previousValues.pop();\n        this.value = this.checkboxDiv.checked ? 1 : 0;\n        this.value = this.checkboxDiv.indeterminate ? -1 : this.value;\n        for (var i = 0; i < this.optionDivs.length; i++) {\n            var opt = this.optionDivs[i];\n            if (opt.className.includes(\'left\')) {\n                opt.className = \'value left\';\n            }\n            else {\n                opt.className = \'value\';\n            }\n            if (i == this.value)\n                opt.className += \' active\';\n        }\n        if (triggerChangeEvent) {\n            this.events.onchange ? this.events.onchange() : null;\n        }\n        for (var _i = 0, _a = this.dependants; _i < _a.length; _i++) {\n            var d = _a[_i];\n            d.activationFunction();\n        }\n    };\n    return ToggleValue;\n}(Value_1.default));\nexports.default = ToggleValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1RvZ2dsZVZhbHVlLnRzPzBhNjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUdBQTJCO0FBRTNCO0lBQXlDLCtCQUFLO0lBUTFDLHFCQUFZLEVBQVc7UUFBdkIsWUFDSSxrQkFBTSxFQUFFLENBQUMsU0FhWjtRQVhHLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFnQjtRQUN6RCxLQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQXFCO1FBRTdFLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTlDLEtBQUksQ0FBQyxVQUFVLEdBQUc7WUFDZCxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQWdCO1lBQ3pDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBZ0I7U0FDNUM7UUFFRCxLQUFJLENBQUMsWUFBWSxFQUFFOztJQUN2QixDQUFDO0lBRUQsa0NBQVksR0FBWjtRQUFBLGlCQVlDO1FBVkcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUc7WUFHbkIsS0FBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEdBQUcsS0FBSztZQUN0QyxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztZQUVwRCxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUUxQixDQUFDO0lBRUwsQ0FBQztJQUVELDJCQUFLLEdBQUwsVUFBTSxLQUFzQjtRQUV4QixJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFBRTtZQUMxQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sR0FBRyxLQUFLO1lBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxHQUFHLElBQUk7U0FDeEM7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztZQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsR0FBRyxLQUFLO1NBQ3pDO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFFM0IsQ0FBQztJQUVELDhCQUFRLEdBQVIsVUFBUyxLQUFhO1FBRWxCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBRTFCLENBQUM7SUFFRCxpQ0FBVyxHQUFYLFVBQVksa0JBQTJCO1FBR25DLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxFQUFFO1lBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUU7UUFHOUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLO1FBRzdELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUU1QixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNoQyxHQUFHLENBQUMsU0FBUyxHQUFHLFlBQVk7YUFDL0I7aUJBQU07Z0JBQ0gsR0FBRyxDQUFDLFNBQVMsR0FBRyxPQUFPO2FBQzFCO1lBRUQsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUs7Z0JBQUUsR0FBRyxDQUFDLFNBQVMsSUFBSSxTQUFTO1NBQ2xEO1FBRUQsSUFBSSxrQkFBa0IsRUFBRTtZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUN2RDtRQUdELEtBQWMsVUFBZSxFQUFmLFNBQUksQ0FBQyxVQUFVLEVBQWYsY0FBZSxFQUFmLElBQWU7WUFBeEIsSUFBSSxDQUFDO1lBQXFCLENBQUMsQ0FBQyxrQkFBa0IsRUFBRTtTQUFBO0lBRXpELENBQUM7SUFDTCxrQkFBQztBQUFELENBQUMsQ0ExRndDLGVBQUssR0EwRjdDIiwiZmlsZSI6Ii4uL3dlYlBhcnRpY2xlcy9zcmMvdHMvdWlfdGhyZWFkL3ZhbHVlcy9Ub2dnbGVWYWx1ZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWYWx1ZSBmcm9tICcuL1ZhbHVlJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2dnbGVWYWx1ZSBleHRlbmRzIFZhbHVlIHtcblxuICAgIHZhbHVlOiBudW1iZXJcblxuICAgIGxhYmVsRGl2OiBIVE1MRWxlbWVudFxuICAgIGNoZWNrYm94RGl2OiBIVE1MSW5wdXRFbGVtZW50XG4gICAgb3B0aW9uRGl2czogSFRNTEVsZW1lbnRbXVxuXG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoZWwpXG5cbiAgICAgICAgdGhpcy5sYWJlbERpdiA9IGVsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdIGFzIEhUTUxFbGVtZW50XG4gICAgICAgIHRoaXMuY2hlY2tib3hEaXYgPSBlbC5jaGlsZHJlblswXS5jaGlsZHJlblsyXS5jaGlsZHJlblswXSBhcyBIVE1MSW5wdXRFbGVtZW50XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2hlY2tib3hEaXYuY2hlY2tlZCA/IDEgOiAwO1xuXG4gICAgICAgIHRoaXMub3B0aW9uRGl2cyA9IFtcbiAgICAgICAgICAgIGVsLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzFdIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgZWwuY2hpbGRyZW5bMF0uY2hpbGRyZW5bM10gYXMgSFRNTEVsZW1lbnRcbiAgICAgICAgXVxuXG4gICAgICAgIHRoaXMuaW50ZXJhY3Rpb25zKClcbiAgICB9XG5cbiAgICBpbnRlcmFjdGlvbnMoKSB7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uY2xpY2sgPSAoKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBDaGVja2JveCBJbmRpY2F0b3JcbiAgICAgICAgICAgIHRoaXMuY2hlY2tib3hEaXYuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlXG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94RGl2LmNoZWNrZWQgPSAhdGhpcy5jaGVja2JveERpdi5jaGVja2VkXG5cbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2UodHJ1ZSlcblxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIHNldFVJKHZhbHVlOiBudW1iZXIgfCBzdHJpbmcpIHtcblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrYm94RGl2LmNoZWNrZWQgPSBmYWxzZVxuICAgICAgICAgICAgdGhpcy5jaGVja2JveERpdi5pbmRldGVybWluYXRlID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGVja2JveERpdi5jaGVja2VkID0gdmFsdWUgPT0gMSA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgdGhpcy5jaGVja2JveERpdi5pbmRldGVybWluYXRlID0gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UoZmFsc2UpXG5cbiAgICB9XG5cbiAgICBzZXRWYWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG5cbiAgICAgICAgdGhpcy5zZXRVSSh2YWx1ZSlcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZSh0cnVlKVxuXG4gICAgfVxuXG4gICAgdmFsdWVDaGFuZ2UodHJpZ2dlckNoYW5nZUV2ZW50OiBib29sZWFuKSB7XG5cbiAgICAgICAgLy8gU3RvcmUgUHJldmlvdXMgVmFsdWVcbiAgICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlcy51bnNoaWZ0KHRoaXMudmFsdWUpXG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzVmFsdWVzLmxlbmd0aCA+IDEwKSB0aGlzLnByZXZpb3VzVmFsdWVzLnBvcCgpXG5cbiAgICAgICAgLy8gVXBkYXRlIFZhbHVlXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNoZWNrYm94RGl2LmNoZWNrZWQgPyAxIDogMDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2hlY2tib3hEaXYuaW5kZXRlcm1pbmF0ZSA/IC0xIDogdGhpcy52YWx1ZVxuXG4gICAgICAgIC8vIFVwZGF0ZSBPcHRpb25zIEluZGljYXRvclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9uRGl2cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG9wdCA9IHRoaXMub3B0aW9uRGl2c1tpXVxuXG4gICAgICAgICAgICBpZiAob3B0LmNsYXNzTmFtZS5pbmNsdWRlcygnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgb3B0LmNsYXNzTmFtZSA9ICd2YWx1ZSBsZWZ0J1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHQuY2xhc3NOYW1lID0gJ3ZhbHVlJ1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaSA9PSB0aGlzLnZhbHVlKSBvcHQuY2xhc3NOYW1lICs9ICcgYWN0aXZlJ1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMub25jaGFuZ2UgPyB0aGlzLmV2ZW50cy5vbmNoYW5nZSgpIDogbnVsbFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgRGVwZW5kYW50c1xuICAgICAgICBmb3IgKGxldCBkIG9mIHRoaXMuZGVwZW5kYW50cykgZC5hY3RpdmF0aW9uRnVuY3Rpb24oKVxuXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/ToggleValue.ts\n')},"../webParticles/src/ts/ui_thread/values/Value.ts":/*!********************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/Value.ts ***!
  \********************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar Value = (function () {\n    function Value(el) {\n        this.previousValues = [];\n        this.element = el;\n        this.scriptName = el.getAttribute(\'name\');\n        this.label = el.children[0].children[0].textContent;\n        this.type = el.getAttribute(\'type\');\n        this.dataType = el.getAttribute(\'dataType\');\n        this.dependencies = [];\n        this.dependants = [];\n        if (el.getAttribute(\'dependencies\')) {\n            this.dependencyExpressions = el.getAttribute(\'dependencies\');\n        }\n        this.disabled = false;\n        this.events = {};\n    }\n    Value.prototype.activationFunction = function () {\n        if (this.dependencies.length <= 0)\n            return;\n        var boolFlag = true;\n        for (var _i = 0, _a = this.dependencies; _i < _a.length; _i++) {\n            var d = _a[_i];\n            if (d.value.disabled) {\n                this.disableValue(true);\n                return;\n            }\n            if (!eval(\'(\' + d.value.value + d.expression + d.checkVal + \')\')) {\n                boolFlag = false;\n            }\n        }\n        this.disableValue(!boolFlag);\n        for (var _b = 0, _c = this.dependants; _b < _c.length; _b++) {\n            var d = _c[_b];\n            d.activationFunction();\n        }\n    };\n    Value.prototype.disableValue = function (check) {\n        this.disabled = check;\n        this.element.className = check ? \'property disabled\' : \'property\';\n    };\n    Value.prototype.textInputFilter = function (input, dataType) {\n        var output;\n        var type;\n        type = dataType ? dataType : this.dataType;\n        switch (type) {\n            case \'float\':\n                output = input.match(/-?\\d*[\\.\\,]?\\d*/g)[0];\n                break;\n            case \'uFloat\':\n                output = input.match(/\\d*[\\.\\,]?\\d*/g)[0];\n                break;\n            case \'int\':\n                output = input.match(/-?\\d*/g)[0];\n                break;\n            case \'uInt\':\n                output = input.match(/\\d*/g)[0];\n                break;\n            default:\n                console.error(\'Data Type not defined / found\', type);\n        }\n        output = output.replace(\',\', \'.\');\n        if (isNaN(parseFloat(output)) || output == \'-0\' || output.match(/-?\\d+\\.0*$/g)) {\n            return output;\n        }\n        else {\n            return parseFloat(output);\n        }\n    };\n    Value.prototype.on = function (event, func) {\n        this.events[\'on\' + event] = func.bind(this);\n    };\n    Value.prototype.setUI = function (value) { };\n    return Value;\n}());\nexports.default = Value;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1ZhbHVlLnRzP2UxYTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFRQTtJQXlCSSxlQUFZLEVBQVc7UUFFbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFO1FBRXhCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBaUI7UUFFaEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUN6QyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7UUFFbkQsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUVuQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBRTNDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUU7UUFFcEIsSUFBSSxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQztTQUMvRDtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSztRQUVyQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUU7SUFFcEIsQ0FBQztJQUVELGtDQUFrQixHQUFsQjtRQUVJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksQ0FBQztZQUFFLE9BQU07UUFHekMsSUFBSSxRQUFRLEdBQUcsSUFBSTtRQUVuQixLQUFjLFVBQWlCLEVBQWpCLFNBQUksQ0FBQyxZQUFZLEVBQWpCLGNBQWlCLEVBQWpCLElBQWlCLEVBQUU7WUFBNUIsSUFBSSxDQUFDO1lBRU4sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Z0JBQ3ZCLE9BQU07YUFDVDtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsRUFBRTtnQkFDOUQsUUFBUSxHQUFHLEtBQUs7YUFDbkI7U0FFSjtRQUVELElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFHNUIsS0FBYyxVQUFlLEVBQWYsU0FBSSxDQUFDLFVBQVUsRUFBZixjQUFlLEVBQWYsSUFBZTtZQUF4QixJQUFJLENBQUM7WUFBcUIsQ0FBQyxDQUFDLGtCQUFrQixFQUFFO1NBQUE7SUFFekQsQ0FBQztJQUVELDRCQUFZLEdBQVosVUFBYSxLQUFjO1FBRXZCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSztRQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxVQUFVO0lBRXJFLENBQUM7SUFFRCwrQkFBZSxHQUFmLFVBQWdCLEtBQWEsRUFBRSxRQUFpQjtRQUU1QyxJQUFJLE1BQWM7UUFDbEIsSUFBSSxJQUFZO1FBRWhCLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVE7UUFFMUMsUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLE9BQU87Z0JBQ1IsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE1BQUs7WUFFVCxLQUFLLFFBQVE7Z0JBQ1QsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE1BQUs7WUFFVCxLQUFLLEtBQUs7Z0JBQ04sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxNQUFLO1lBRVQsS0FBSyxNQUFNO2dCQUNQLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsTUFBSztZQUVUO2dCQUNJLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsSUFBSSxDQUFDO1NBQzNEO1FBRUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztRQUVqQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFFNUUsT0FBTyxNQUFNO1NBQ2hCO2FBQU07WUFFSCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUM7U0FDNUI7SUFFTCxDQUFDO0lBRUQsa0JBQUUsR0FBRixVQUFHLEtBQWEsRUFBRSxJQUFjO1FBRTVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFOUMsQ0FBQztJQUVELHFCQUFLLEdBQUwsVUFBTSxLQUFVLElBQUcsQ0FBQztJQUN4QixZQUFDO0FBQUQsQ0FBQyIsImZpbGUiOiIuLi93ZWJQYXJ0aWNsZXMvc3JjL3RzL3VpX3RocmVhZC92YWx1ZXMvVmFsdWUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgZGVwZW5kZW5jeSB7XG4gICAgdmFsdWU6IFZhbHVlLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBleHByZXNzaW9uOiBzdHJpbmcsXG4gICAgY2hlY2tWYWw6IHN0cmluZ1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHVlIHtcblxuICAgIHZhbHVlOiBhbnlcbiAgICBwcmV2aW91c1ZhbHVlczogYW55W11cblxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50XG5cbiAgICBzY3JpcHROYW1lOiBzdHJpbmdcbiAgICBsYWJlbDogc3RyaW5nXG5cbiAgICB0eXBlOiBzdHJpbmdcblxuICAgIGRhdGFUeXBlOiBzdHJpbmdcblxuICAgIC8vIEluaXRpYWwgc3RyaW5nIGlucHV0IGZyb20gcHVnXG4gICAgZGVwZW5kZW5jeUV4cHJlc3Npb25zOiBzdHJpbmdcbiAgICAvLyBWYWx1ZXMgdGhhdCB0aGlzIFZhbHVlIGlzIGRlcGVuZGFudCBvblxuICAgIGRlcGVuZGVuY2llczogZGVwZW5kZW5jeVtdXG4gICAgLy8gVmFsdWVzIHRoYXQgaGF2ZSBhIGRlcGVuZGVuY3kgdG8gdGhpcyBWYWx1ZVxuICAgIGRlcGVuZGFudHM6IFZhbHVlW11cblxuICAgIGRpc2FibGVkOiBib29sZWFuXG5cbiAgICBldmVudHM6IGFueVxuXG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnQpIHtcblxuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWVzID0gW11cblxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbCBhcyBIVE1MRWxlbWVudFxuXG4gICAgICAgIHRoaXMuc2NyaXB0TmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnbmFtZScpXG4gICAgICAgIHRoaXMubGFiZWwgPSBlbC5jaGlsZHJlblswXS5jaGlsZHJlblswXS50ZXh0Q29udGVudFxuXG4gICAgICAgIHRoaXMudHlwZSA9IGVsLmdldEF0dHJpYnV0ZSgndHlwZScpXG5cbiAgICAgICAgdGhpcy5kYXRhVHlwZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YVR5cGUnKVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBbXVxuICAgICAgICB0aGlzLmRlcGVuZGFudHMgPSBbXVxuICAgICAgICBcbiAgICAgICAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnZGVwZW5kZW5jaWVzJykpIHtcbiAgICAgICAgICAgIHRoaXMuZGVwZW5kZW5jeUV4cHJlc3Npb25zID0gZWwuZ2V0QXR0cmlidXRlKCdkZXBlbmRlbmNpZXMnKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlXG5cbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fVxuXG4gICAgfVxuXG4gICAgYWN0aXZhdGlvbkZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGlmICh0aGlzLmRlcGVuZGVuY2llcy5sZW5ndGggPD0gMCkgcmV0dXJuXG5cblxuICAgICAgICBsZXQgYm9vbEZsYWcgPSB0cnVlXG5cbiAgICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLmRlcGVuZGVuY2llcykge1xuXG4gICAgICAgICAgICBpZiAoZC52YWx1ZS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZVZhbHVlKHRydWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZXZhbCgnKCcgKyBkLnZhbHVlLnZhbHVlICsgZC5leHByZXNzaW9uICsgZC5jaGVja1ZhbCArICcpJykpIHtcbiAgICAgICAgICAgICAgICBib29sRmxhZyA9IGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzYWJsZVZhbHVlKCFib29sRmxhZylcblxuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLmRlcGVuZGFudHMpIGQuYWN0aXZhdGlvbkZ1bmN0aW9uKClcblxuICAgIH1cblxuICAgIGRpc2FibGVWYWx1ZShjaGVjazogYm9vbGVhbikge1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBjaGVja1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gY2hlY2sgPyAncHJvcGVydHkgZGlzYWJsZWQnIDogJ3Byb3BlcnR5J1xuXG4gICAgfVxuXG4gICAgdGV4dElucHV0RmlsdGVyKGlucHV0OiBzdHJpbmcsIGRhdGFUeXBlPzogc3RyaW5nKSB7XG5cbiAgICAgICAgbGV0IG91dHB1dDogc3RyaW5nXG4gICAgICAgIGxldCB0eXBlOiBzdHJpbmdcblxuICAgICAgICB0eXBlID0gZGF0YVR5cGUgPyBkYXRhVHlwZSA6IHRoaXMuZGF0YVR5cGUgIFxuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZmxvYXQnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IGlucHV0Lm1hdGNoKC8tP1xcZCpbXFwuXFwsXT9cXGQqL2cpWzBdXG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSAndUZsb2F0JzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBpbnB1dC5tYXRjaCgvXFxkKltcXC5cXCxdP1xcZCovZylbMF1cbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBjYXNlICdpbnQnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9IGlucHV0Lm1hdGNoKC8tP1xcZCovZylbMF1cbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAndUludCc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gaW5wdXQubWF0Y2goL1xcZCovZylbMF1cbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGEgVHlwZSBub3QgZGVmaW5lZCAvIGZvdW5kJywgdHlwZSlcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKCcsJywgJy4nKVxuXG4gICAgICAgIGlmIChpc05hTihwYXJzZUZsb2F0KG91dHB1dCkpIHx8IG91dHB1dCA9PSAnLTAnIHx8IG91dHB1dC5tYXRjaCgvLT9cXGQrXFwuMCokL2cpKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmV0dXJuaW5nIHN0cmluZycsIG91dHB1dClcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXR1cm5pbmcgbnVtYmVyJywgcGFyc2VGbG9hdChvdXRwdXQpKVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQob3V0cHV0KVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBvbihldmVudDogc3RyaW5nLCBmdW5jOiBGdW5jdGlvbikge1xuXG4gICAgICAgIHRoaXMuZXZlbnRzWydvbicrZXZlbnRdID0gZnVuYy5iaW5kKHRoaXMpO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgc2V0VUkodmFsdWU6IGFueSkge31cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/Value.ts\n')},"../webParticles/src/ts/ui_thread/values/Values.ts":/*!*********************************************************!*\
  !*** ../webParticles/src/ts/ui_thread/values/Values.ts ***!
  \*********************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar TextValue_1 = __webpack_require__(/*! ./TextValue */ "../webParticles/src/ts/ui_thread/values/TextValue.ts");\nvar SliderValue_1 = __webpack_require__(/*! ./SliderValue */ "../webParticles/src/ts/ui_thread/values/SliderValue.ts");\nvar RangeValue_1 = __webpack_require__(/*! ./RangeValue */ "../webParticles/src/ts/ui_thread/values/RangeValue.ts");\nvar CheckboxValue_1 = __webpack_require__(/*! ./CheckboxValue */ "../webParticles/src/ts/ui_thread/values/CheckboxValue.ts");\nvar ToggleValue_1 = __webpack_require__(/*! ./ToggleValue */ "../webParticles/src/ts/ui_thread/values/ToggleValue.ts");\nvar CurveValue_1 = __webpack_require__(/*! ./CurveValue */ "../webParticles/src/ts/ui_thread/values/CurveValue.ts");\nvar GradientValue_1 = __webpack_require__(/*! ./GradientValue */ "../webParticles/src/ts/ui_thread/values/GradientValue.ts");\nvar fn = {\n    text: TextValue_1.default,\n    slider: SliderValue_1.default,\n    range: RangeValue_1.default,\n    checkbox: CheckboxValue_1.default,\n    toggle: ToggleValue_1.default,\n    curve: CurveValue_1.default,\n    gradient: GradientValue_1.default\n};\nvar Values = (function () {\n    function Values(parentDiv) {\n        var _this = this;\n        this.values = [];\n        Array.from(parentDiv.getElementsByClassName(\'property\')).forEach(function (el) {\n            _this.values.push(new fn[el.getAttribute(\'type\')](el));\n        });\n        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n            var currentValue = _a[_i];\n            if (currentValue.type == \'curve\') {\n                var curveVal = currentValue;\n                var depVal = this.find(currentValue.scriptName.replace(\'Curve\', \'\'));\n                curveVal.indicatorYDependency = depVal;\n                depVal.dependentCurves.push(curveVal);\n                curveVal = currentValue;\n                depVal = this.find(\'lifetime\');\n                curveVal.indicatorXDependency = depVal;\n                depVal.dependentCurves.push(curveVal);\n                curveVal.updateIndicators();\n                curveVal.updateCurrentValue();\n            }\n        }\n        for (var _b = 0, _c = this.values; _b < _c.length; _b++) {\n            var currentValue = _c[_b];\n            if (currentValue.dependencyExpressions) {\n                var depExp = currentValue.dependencyExpressions.replace(/\\s/g, \'\').split(\'&&\');\n                for (var _d = 0, depExp_1 = depExp; _d < depExp_1.length; _d++) {\n                    var dep = depExp_1[_d];\n                    var dName = dep.replace(/([\\W\\d]|false$|true$)/g, \'\');\n                    var dExpression = dep.replace(/\\w/g, \'\');\n                    var match = dep.match(/([\\d]|false$|true$)/g);\n                    var dCheckValue = match && match.length > 0 ? match[0] : \'\';\n                    var dValue = this.find(dName);\n                    if (dExpression == \'!\') {\n                        dExpression = \'==\';\n                        dCheckValue = \'false\';\n                    }\n                    currentValue.dependencies.push({\n                        value: dValue,\n                        name: dName,\n                        expression: dExpression,\n                        checkVal: dCheckValue\n                    });\n                    dValue.dependants.push(currentValue);\n                }\n                currentValue.activationFunction();\n            }\n        }\n    }\n    Values.prototype.find = function (scriptName) {\n        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n            var value = _a[_i];\n            if (value.scriptName == scriptName) {\n                return value;\n            }\n        }\n        console.error(\'Could not find value with script name "\' + scriptName + \'"\');\n    };\n    return Values;\n}());\nexports.default = Values;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1ZhbHVlcy50cz85YzdhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUhBQW1DO0FBQ25DLHVIQUF1QztBQUN2QyxvSEFBcUM7QUFDckMsNkhBQTJDO0FBQzNDLHVIQUF1QztBQUN2QyxvSEFBcUM7QUFDckMsNkhBQTJDO0FBRzNDLElBQUksRUFBRSxHQUFRO0lBQ1YsSUFBSSxFQUFFLG1CQUFTO0lBQ2YsTUFBTSxFQUFFLHFCQUFXO0lBQ25CLEtBQUssRUFBRSxvQkFBVTtJQUNqQixRQUFRLEVBQUUsdUJBQWE7SUFDdkIsTUFBTSxFQUFFLHFCQUFXO0lBQ25CLEtBQUssRUFBRSxvQkFBVTtJQUNqQixRQUFRLEVBQUUsdUJBQWE7Q0FDMUI7QUFHRDtJQUdJLGdCQUFZLFNBQXNCO1FBQWxDLGlCQXdFQztRQXBFRyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUU7UUFFaEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFlO1lBQzdFLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUM7UUFLRixLQUF5QixVQUFXLEVBQVgsU0FBSSxDQUFDLE1BQU0sRUFBWCxjQUFXLEVBQVgsSUFBVyxFQUFFO1lBQWpDLElBQUksWUFBWTtZQUNqQixJQUFJLFlBQVksQ0FBQyxJQUFJLElBQUksT0FBTyxFQUFFO2dCQUc5QixJQUFJLFFBQVEsR0FBRyxZQUEwQjtnQkFDekMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQWU7Z0JBRWxGLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxNQUFNO2dCQUN0QyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBR3JDLFFBQVEsR0FBRyxZQUEwQjtnQkFDckMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFlO2dCQUU1QyxRQUFRLENBQUMsb0JBQW9CLEdBQUcsTUFBTTtnQkFDdEMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUVyQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQzNCLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRTthQUNoQztTQUNKO1FBTUQsS0FBeUIsVUFBVyxFQUFYLFNBQUksQ0FBQyxNQUFNLEVBQVgsY0FBVyxFQUFYLElBQVcsRUFBRTtZQUFqQyxJQUFJLFlBQVk7WUFDakIsSUFBSSxZQUFZLENBQUMscUJBQXFCLEVBQUU7Z0JBRXBDLElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBRTlFLEtBQWdCLFVBQU0sRUFBTixpQkFBTSxFQUFOLG9CQUFNLEVBQU4sSUFBTSxFQUFFO29CQUFuQixJQUFJLEdBQUc7b0JBRVIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLENBQUM7b0JBQ3JELElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztvQkFDeEMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQztvQkFDN0MsSUFBSSxXQUFXLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQzNELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO29CQUU3QixJQUFJLFdBQVcsSUFBSSxHQUFHLEVBQUU7d0JBQ3BCLFdBQVcsR0FBRyxJQUFJO3dCQUNsQixXQUFXLEdBQUcsT0FBTztxQkFDeEI7b0JBRUQsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7d0JBQzNCLEtBQUssRUFBRSxNQUFNO3dCQUNiLElBQUksRUFBRSxLQUFLO3dCQUNYLFVBQVUsRUFBRSxXQUFXO3dCQUN2QixRQUFRLEVBQUUsV0FBVztxQkFDeEIsQ0FBQztvQkFDRixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7aUJBRXZDO2dCQUVELFlBQVksQ0FBQyxrQkFBa0IsRUFBRTthQUNwQztTQUNKO0lBR0wsQ0FBQztJQUVELHFCQUFJLEdBQUosVUFBSyxVQUFrQjtRQUVuQixLQUFrQixVQUFXLEVBQVgsU0FBSSxDQUFDLE1BQU0sRUFBWCxjQUFXLEVBQVgsSUFBVyxFQUFFO1lBQTFCLElBQUksS0FBSztZQUNWLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUU7Z0JBQ2hDLE9BQU8sS0FBSzthQUNmO1NBQ0o7UUFFRCxPQUFPLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxHQUFHLFVBQVUsR0FBRyxHQUFHLENBQUM7SUFFL0UsQ0FBQztJQUNMLGFBQUM7QUFBRCxDQUFDIiwiZmlsZSI6Ii4uL3dlYlBhcnRpY2xlcy9zcmMvdHMvdWlfdGhyZWFkL3ZhbHVlcy9WYWx1ZXMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmFsdWUgZnJvbSAnLi9WYWx1ZSdcbmltcG9ydCBUZXh0VmFsdWUgZnJvbSAnLi9UZXh0VmFsdWUnXG5pbXBvcnQgU2xpZGVyVmFsdWUgZnJvbSAnLi9TbGlkZXJWYWx1ZSdcbmltcG9ydCBSYW5nZVZhbHVlIGZyb20gJy4vUmFuZ2VWYWx1ZSdcbmltcG9ydCBDaGVja2JveFZhbHVlIGZyb20gJy4vQ2hlY2tib3hWYWx1ZSdcbmltcG9ydCBUb2dnbGVWYWx1ZSBmcm9tICcuL1RvZ2dsZVZhbHVlJ1xuaW1wb3J0IEN1cnZlVmFsdWUgZnJvbSAnLi9DdXJ2ZVZhbHVlJ1xuaW1wb3J0IEdyYWRpZW50VmFsdWUgZnJvbSAnLi9HcmFkaWVudFZhbHVlJ1xuXG5cbmxldCBmbjogYW55ID0ge1xuICAgIHRleHQ6IFRleHRWYWx1ZSxcbiAgICBzbGlkZXI6IFNsaWRlclZhbHVlLFxuICAgIHJhbmdlOiBSYW5nZVZhbHVlLFxuICAgIGNoZWNrYm94OiBDaGVja2JveFZhbHVlLFxuICAgIHRvZ2dsZTogVG9nZ2xlVmFsdWUsXG4gICAgY3VydmU6IEN1cnZlVmFsdWUsXG4gICAgZ3JhZGllbnQ6IEdyYWRpZW50VmFsdWVcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYWx1ZXMge1xuICAgIHZhbHVlczogVmFsdWVbXVxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHBhcmVudERpdjogSFRNTEVsZW1lbnQpIHtcblxuICAgICAgICAvLyBJbml0aWFsaXplIGFsbCBWYWx1ZXNcblxuICAgICAgICB0aGlzLnZhbHVlcyA9IFtdXG5cbiAgICAgICAgQXJyYXkuZnJvbShwYXJlbnREaXYuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncHJvcGVydHknKSkuZm9yRWFjaCgoZWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKG5ldyBmbltlbC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKV0oZWwpKVxuICAgICAgICB9KVxuXG5cbiAgICAgICAgLy8gRmlsbCBDdXJ2ZSBWYWx1ZSBEZXBlbmRlbmNpZXNcbiAgICAgICAgLy8gT25seSB3b3JrcyBhZnRlciBhbGwgVmFsdWVzIGhhdmUgYmVlbiBpbml0aWFsaXplZFxuICAgICAgICBmb3IgKGxldCBjdXJyZW50VmFsdWUgb2YgdGhpcy52YWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUudHlwZSA9PSAnY3VydmUnKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBZXG4gICAgICAgICAgICAgICAgbGV0IGN1cnZlVmFsID0gY3VycmVudFZhbHVlIGFzIEN1cnZlVmFsdWVcbiAgICAgICAgICAgICAgICBsZXQgZGVwVmFsID0gdGhpcy5maW5kKGN1cnJlbnRWYWx1ZS5zY3JpcHROYW1lLnJlcGxhY2UoJ0N1cnZlJywgJycpKSBhcyBSYW5nZVZhbHVlXG5cbiAgICAgICAgICAgICAgICBjdXJ2ZVZhbC5pbmRpY2F0b3JZRGVwZW5kZW5jeSA9IGRlcFZhbFxuICAgICAgICAgICAgICAgIGRlcFZhbC5kZXBlbmRlbnRDdXJ2ZXMucHVzaChjdXJ2ZVZhbClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBYXG4gICAgICAgICAgICAgICAgY3VydmVWYWwgPSBjdXJyZW50VmFsdWUgYXMgQ3VydmVWYWx1ZVxuICAgICAgICAgICAgICAgIGRlcFZhbCA9IHRoaXMuZmluZCgnbGlmZXRpbWUnKSBhcyBSYW5nZVZhbHVlXG5cbiAgICAgICAgICAgICAgICBjdXJ2ZVZhbC5pbmRpY2F0b3JYRGVwZW5kZW5jeSA9IGRlcFZhbFxuICAgICAgICAgICAgICAgIGRlcFZhbC5kZXBlbmRlbnRDdXJ2ZXMucHVzaChjdXJ2ZVZhbClcblxuICAgICAgICAgICAgICAgIGN1cnZlVmFsLnVwZGF0ZUluZGljYXRvcnMoKVxuICAgICAgICAgICAgICAgIGN1cnZlVmFsLnVwZGF0ZUN1cnJlbnRWYWx1ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIEZpbGwgZGVwZW5kZW5jaWVzIC8gZGVwZW5kYW50cyBMaXN0XG4gICAgICAgIC8vIE9ubHkgd29ya3MgYWZ0ZXIgYWxsIFZhbHVlcyBoYXZlIGJlZW4gaW5pdGlhbGl6ZWRcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGN1cnJlbnRWYWx1ZSBvZiB0aGlzLnZhbHVlcykge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZS5kZXBlbmRlbmN5RXhwcmVzc2lvbnMpIHtcblxuICAgICAgICAgICAgICAgIGxldCBkZXBFeHAgPSBjdXJyZW50VmFsdWUuZGVwZW5kZW5jeUV4cHJlc3Npb25zLnJlcGxhY2UoL1xccy9nLCAnJykuc3BsaXQoJyYmJylcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGRlcCBvZiBkZXBFeHApIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZE5hbWUgPSBkZXAucmVwbGFjZSgvKFtcXFdcXGRdfGZhbHNlJHx0cnVlJCkvZywgJycpXG4gICAgICAgICAgICAgICAgICAgIGxldCBkRXhwcmVzc2lvbiA9IGRlcC5yZXBsYWNlKC9cXHcvZywgJycpXG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IGRlcC5tYXRjaCgvKFtcXGRdfGZhbHNlJHx0cnVlJCkvZylcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRDaGVja1ZhbHVlID0gbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMCA/IG1hdGNoWzBdIDogJydcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRWYWx1ZSA9IHRoaXMuZmluZChkTmFtZSlcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZEV4cHJlc3Npb24gPT0gJyEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkRXhwcmVzc2lvbiA9ICc9PSdcbiAgICAgICAgICAgICAgICAgICAgICAgIGRDaGVja1ZhbHVlID0gJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlLmRlcGVuZGVuY2llcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBkTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IGRFeHByZXNzaW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWw6IGRDaGVja1ZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGRWYWx1ZS5kZXBlbmRhbnRzLnB1c2goY3VycmVudFZhbHVlKVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlLmFjdGl2YXRpb25GdW5jdGlvbigpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgZmluZChzY3JpcHROYW1lOiBzdHJpbmcpIHtcblxuICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB0aGlzLnZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnNjcmlwdE5hbWUgPT0gc2NyaXB0TmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5lcnJvcignQ291bGQgbm90IGZpbmQgdmFsdWUgd2l0aCBzY3JpcHQgbmFtZSBcIicgKyBzY3JpcHROYW1lICsgJ1wiJylcblxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../webParticles/src/ts/ui_thread/values/Values.ts\n')},"./node_modules/base64-js/index.js":/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== \'undefined\' ? Uint8Array : Array\n\nvar code = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup[\'-\'.charCodeAt(0)] = 62\nrevLookup[\'_\'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error(\'Invalid string. Length must be a multiple of 4\')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf(\'=\')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join(\'\')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we\'ll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      \'==\'\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      \'=\'\n    )\n  }\n\n  return parts.join(\'\')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzFmYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n')},"./node_modules/ieee754/index.js":/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************//*! no static exports found */function(module,exports){eval('exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz85MTUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLFFBQVEsVUFBVTs7QUFFbEI7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n')},"./node_modules/isarray/index.js":/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************//*! no static exports found */function(module,exports){eval('var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == \'[object Array]\';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9lM2RiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n')},"./node_modules/node-libs-browser/node_modules/buffer/index.js":/*!*********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/buffer/index.js ***!
  \*********************************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")\nvar ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")\nvar isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === \'function\' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError(\'Invalid typed array length\')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === \'number\') {\n    if (typeof encodingOrOffset === \'string\') {\n      throw new Error(\n        \'If encoding is specified then the first argument must be a string\'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === \'number\') {\n    throw new TypeError(\'"value" argument must not be a number\')\n  }\n\n  if (typeof ArrayBuffer !== \'undefined\' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === \'string\') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== \'undefined\' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== \'number\') {\n    throw new TypeError(\'"size" argument must be a number\')\n  } else if (size < 0) {\n    throw new RangeError(\'"size" argument must not be negative\')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it\'s a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === \'string\'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== \'string\' || encoding === \'\') {\n    encoding = \'utf8\'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError(\'"encoding" must be a valid string encoding\')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // \'abxxcd\' will be treated as \'ab\')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError(\'\\\'offset\\\' is out of bounds\')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError(\'\\\'length\\\' is out of bounds\')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== \'undefined\' &&\n        obj.buffer instanceof ArrayBuffer) || \'length\' in obj) {\n      if (typeof obj.length !== \'number\' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === \'Buffer\' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError(\'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError(\'Attempt to allocate Buffer larger than maximum \' +\n                         \'size: 0x\' + kMaxLength().toString(16) + \' bytes\')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\'Arguments must be Buffers\')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case \'hex\':\n    case \'utf8\':\n    case \'utf-8\':\n    case \'ascii\':\n    case \'latin1\':\n    case \'binary\':\n    case \'base64\':\n    case \'ucs2\':\n    case \'ucs-2\':\n    case \'utf16le\':\n    case \'utf-16le\':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError(\'"list" argument must be an Array of Buffers\')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError(\'"list" argument must be an Array of Buffers\')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== \'undefined\' && typeof ArrayBuffer.isView === \'function\' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== \'string\') {\n    string = \'\' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case \'ascii\':\n      case \'latin1\':\n      case \'binary\':\n        return len\n      case \'utf8\':\n      case \'utf-8\':\n      case undefined:\n        return utf8ToBytes(string).length\n      case \'ucs2\':\n      case \'ucs-2\':\n      case \'utf16le\':\n      case \'utf-16le\':\n        return len * 2\n      case \'hex\':\n        return len >>> 1\n      case \'base64\':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = (\'\' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that "this.length <= MAX_UINT32" since it\'s a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return \'\'\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return \'\'\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return \'\'\n  }\n\n  if (!encoding) encoding = \'utf8\'\n\n  while (true) {\n    switch (encoding) {\n      case \'hex\':\n        return hexSlice(this, start, end)\n\n      case \'utf8\':\n      case \'utf-8\':\n        return utf8Slice(this, start, end)\n\n      case \'ascii\':\n        return asciiSlice(this, start, end)\n\n      case \'latin1\':\n      case \'binary\':\n        return latin1Slice(this, start, end)\n\n      case \'base64\':\n        return base64Slice(this, start, end)\n\n      case \'ucs2\':\n      case \'ucs-2\':\n      case \'utf16le\':\n      case \'utf-16le\':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError(\'Unknown encoding: \' + encoding)\n        encoding = (encoding + \'\').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError(\'Buffer size must be a multiple of 16-bits\')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError(\'Buffer size must be a multiple of 32-bits\')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError(\'Buffer size must be a multiple of 64-bits\')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return \'\'\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError(\'Argument must be a Buffer\')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = \'\'\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString(\'hex\', 0, max).match(/.{2}/g).join(\' \')\n    if (this.length > max) str += \' ... \'\n  }\n  return \'<Buffer \' + str + \'>\'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\'Argument must be a Buffer\')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError(\'out of range index\')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === \'string\') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it\'s undefined, null, NaN, "foo", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === \'string\') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === \'number\') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === \'function\') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError(\'val must be string, number or Buffer\')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === \'ucs2\' || encoding === \'ucs-2\' ||\n        encoding === \'utf16le\' || encoding === \'utf-16le\') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError(\'Invalid hex string\')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = \'utf8\'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === \'string\') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = \'utf8\'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      \'Buffer.write(string, encoding, offset[, length]) is no longer supported\'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError(\'Attempt to write outside buffer bounds\')\n  }\n\n  if (!encoding) encoding = \'utf8\'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case \'hex\':\n        return hexWrite(this, string, offset, length)\n\n      case \'utf8\':\n      case \'utf-8\':\n        return utf8Write(this, string, offset, length)\n\n      case \'ascii\':\n        return asciiWrite(this, string, offset, length)\n\n      case \'latin1\':\n      case \'binary\':\n        return latin1Write(this, string, offset, length)\n\n      case \'base64\':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case \'ucs2\':\n      case \'ucs-2\':\n      case \'utf16le\':\n      case \'utf-16le\':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError(\'Unknown encoding: \' + encoding)\n        encoding = (\'\' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: \'Buffer\',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid "call stack size exceeded".\n  var res = \'\'\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = \'\'\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = \'\'\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = \'\'\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = \'\'\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn\'t trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError(\'offset is not uint\')\n  if (offset + ext > length) throw new RangeError(\'Trying to access beyond buffer length\')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError(\'"buffer" argument must be a Buffer instance\')\n  if (value > max || value < min) throw new RangeError(\'"value" argument is out of bounds\')\n  if (offset + ext > buf.length) throw new RangeError(\'Index out of range\')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError(\'Index out of range\')\n  if (offset < 0) throw new RangeError(\'Index out of range\')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we\'re done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError(\'targetStart out of bounds\')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError(\'sourceStart out of bounds\')\n  if (end < 0) throw new RangeError(\'sourceEnd out of bounds\')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === \'string\') {\n    if (typeof start === \'string\') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === \'string\') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== \'string\') {\n      throw new TypeError(\'encoding must be a string\')\n    }\n    if (typeof encoding === \'string\' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError(\'Unknown encoding: \' + encoding)\n    }\n  } else if (typeof val === \'number\') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError(\'Out of range index\')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === \'number\') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, \'\')\n  // Node converts strings with length < 2 to \'\'\n  if (str.length < 2) return \'\'\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + \'=\'\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, \'\')\n}\n\nfunction toHex (n) {\n  if (n < 16) return \'0\' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error(\'Invalid code point\')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node\'s code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/node_modules/buffer/index.js\n')},"./node_modules/webpack/buildin/global.js":/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************//*! no static exports found */function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n')},"./src/client/ts/chooseFile.ts":/*!*************************************!*\
  !*** ./src/client/ts/chooseFile.ts ***!
  \*************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar processFile_1 = __webpack_require__(/*! ./processFile */ "./src/client/ts/processFile.ts");\nvar drawingLoop_1 = __webpack_require__(/*! ./drawingLoop */ "./src/client/ts/drawingLoop.ts");\nvar dropZone = document.getElementById(\'dropZone\');\ndropZone.onclick = function (evt) {\n    drawingLoop_1.stopDrawingLoop();\n    var input = document.createElement(\'input\');\n    input.type = \'file\';\n    input.name = \'ilda\';\n    input.accept = \'.ild\';\n    input.click();\n    input.onchange = function (evt) { return processFile_1.default(input.files[0]); };\n};\ndropZone.ondrop = function (evt) {\n    drawingLoop_1.stopDrawingLoop();\n    evt.preventDefault();\n    dropZone.style.outlineWidth = \'1px\';\n    if (evt.dataTransfer.items) {\n        var file = evt.dataTransfer.items[0].getAsFile();\n        processFile_1.default(file);\n    }\n};\ndropZone.ondragover = function (evt) {\n    evt.preventDefault();\n};\ndropZone.ondragenter = function (evt) {\n    dropZone.style.outlineWidth = \'5px\';\n};\ndropZone.ondragleave = function (evt) {\n    dropZone.style.outlineWidth = \'1px\';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3RzL2Nob29zZUZpbGUudHM/ZWY4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtGQUF1QztBQUN2QywrRkFBK0M7QUFPL0MsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7QUFFcEQsUUFBUSxDQUFDLE9BQU8sR0FBRyxVQUFDLEdBQUc7SUFFbkIsNkJBQWUsRUFBRTtJQUVqQixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUN2QyxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU07SUFDbkIsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNO0lBQ25CLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTTtJQUVyQixLQUFLLENBQUMsS0FBSyxFQUFFO0lBQ2IsS0FBSyxDQUFDLFFBQVEsR0FBRyxVQUFDLEdBQUcsSUFBSyw0QkFBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBM0IsQ0FBMkI7QUFFN0QsQ0FBQztBQUVELFFBQVEsQ0FBQyxNQUFNLEdBQUcsVUFBQyxHQUFHO0lBRWxCLDZCQUFlLEVBQUU7SUFFakIsR0FBRyxDQUFDLGNBQWMsRUFBRTtJQUNwQixRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksR0FBRyxLQUFLO0lBRW5DLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFFeEIsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFO1FBQ2hELHFCQUFXLENBQUMsSUFBSSxDQUFDO0tBRXBCO0FBRUwsQ0FBQztBQUVELFFBQVEsQ0FBQyxVQUFVLEdBQUcsVUFBQyxHQUFHO0lBQ3RCLEdBQUcsQ0FBQyxjQUFjLEVBQUU7QUFDeEIsQ0FBQztBQUNELFFBQVEsQ0FBQyxXQUFXLEdBQUcsVUFBQyxHQUFHO0lBRXZCLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEtBQUs7QUFDdkMsQ0FBQztBQUNELFFBQVEsQ0FBQyxXQUFXLEdBQUcsVUFBQyxHQUFHO0lBRXZCLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEtBQUs7QUFDdkMsQ0FBQyIsImZpbGUiOiIuL3NyYy9jbGllbnQvdHMvY2hvb3NlRmlsZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcm9jZXNzRmlsZSBmcm9tICcuL3Byb2Nlc3NGaWxlJ1xuaW1wb3J0IHsgc3RvcERyYXdpbmdMb29wIH0gZnJvbSAnLi9kcmF3aW5nTG9vcCdcblxuXG4vKiogSGFuZGxlcyB0aGUgVXNlciBJbnRlcmFjdGlvbiBvZiBzZWxlY3RpbmcgLyBkcm9wcGluZyBhIGZpbGVcbiAqIHBhc3NlcyB0aGUgZmlsZSB0byB0aGUgJ3Byb2Nlc3NGaWxlJyBmdW5jdGlvblxuICovXG5cbmNvbnN0IGRyb3Bab25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ryb3Bab25lJylcblxuZHJvcFpvbmUub25jbGljayA9IChldnQpID0+IHtcblxuICAgIHN0b3BEcmF3aW5nTG9vcCgpXG5cbiAgICBsZXQgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgICAgIGlucHV0LnR5cGUgPSAnZmlsZSdcbiAgICAgICAgaW5wdXQubmFtZSA9ICdpbGRhJ1xuICAgICAgICBpbnB1dC5hY2NlcHQgPSAnLmlsZCdcblxuICAgICAgICBpbnB1dC5jbGljaygpXG4gICAgICAgIGlucHV0Lm9uY2hhbmdlID0gKGV2dCkgPT4gcHJvY2Vzc0ZpbGUoaW5wdXQuZmlsZXNbMF0pXG5cbn1cblxuZHJvcFpvbmUub25kcm9wID0gKGV2dCkgPT4ge1xuXG4gICAgc3RvcERyYXdpbmdMb29wKClcblxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZHJvcFpvbmUuc3R5bGUub3V0bGluZVdpZHRoID0gJzFweCdcblxuICAgIGlmIChldnQuZGF0YVRyYW5zZmVyLml0ZW1zKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgZmlsZSA9IGV2dC5kYXRhVHJhbnNmZXIuaXRlbXNbMF0uZ2V0QXNGaWxlKCkgICAgICAgICAgICBcbiAgICAgICAgcHJvY2Vzc0ZpbGUoZmlsZSlcbiAgICBcbiAgICB9XG5cbn1cblxuZHJvcFpvbmUub25kcmFnb3ZlciA9IChldnQpID0+IHtcbiAgICBldnQucHJldmVudERlZmF1bHQoKVxufVxuZHJvcFpvbmUub25kcmFnZW50ZXIgPSAoZXZ0KSA9PiB7XG4gICAgLy8gZHJvcFpvbmUudGV4dENvbnRlbnQgPSAnRFJPUCBNRSdcbiAgICBkcm9wWm9uZS5zdHlsZS5vdXRsaW5lV2lkdGggPSAnNXB4J1xufVxuZHJvcFpvbmUub25kcmFnbGVhdmUgPSAoZXZ0KSA9PiB7XG4gICAgLy8gZHJvcFpvbmUudGV4dENvbnRlbnQgPSAnU2VsZWN0IC8gRHJvcCBmaWxlcydcbiAgICBkcm9wWm9uZS5zdHlsZS5vdXRsaW5lV2lkdGggPSAnMXB4J1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/client/ts/chooseFile.ts\n')},"./src/client/ts/downloadFile.ts":/*!***************************************!*\
  !*** ./src/client/ts/downloadFile.ts ***!
  \***************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar globals_1 = __webpack_require__(/*! ./globals */ "./src/client/ts/globals.ts");\nvar downloadButton = document.getElementById(\'download\');\ndownloadButton.onclick = function () {\n    var formData = new FormData();\n    formData.append(\'data\', globals_1.default.activeFile);\n    formData.append(\'resolution\', globals_1.default.settings.resolution + \'\');\n    formData.append(\'lineWidth\', globals_1.default.settings.lineWidth + \'\');\n    formData.append(\'fps\', globals_1.default.settings.fps + \'\');\n    formData.append(\'fileFormat\', globals_1.default.settings.fileFormat + \'\');\n    fetch(\'/convert\', {\n        method: \'post\',\n        body: formData\n    })\n        .then(function (response) {\n        if (response.status == 200) {\n            response.blob().then(function (blob) {\n                var url = URL.createObjectURL(blob);\n                var a = document.createElement(\'a\');\n                a.style.display = \'none\';\n                a.href = url;\n                if (globals_1.default.settings.fileFormat == \'GIF\') {\n                    a.download = globals_1.default.activeFile.name.replace(\'.ild\', \'.gif\');\n                }\n                else {\n                    a.download = globals_1.default.activeFile.name.replace(\'.ild\', \'.zip\');\n                }\n                document.body.appendChild(a);\n                a.click();\n                URL.revokeObjectURL(url);\n            });\n        }\n        else {\n            response.json().then(function (json) {\n                console.log(json);\n            });\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3RzL2Rvd25sb2FkRmlsZS50cz85ZWNlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUZBQStCO0FBRy9CLElBQUksY0FBYyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO0FBQ3BELGNBQWMsQ0FBQyxPQUFPLEdBQUc7SUFJekIsSUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUU7SUFDekIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsaUJBQU8sQ0FBQyxVQUFVLENBQUM7SUFFM0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsaUJBQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUMvRCxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQzdELFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGlCQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFFakQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsaUJBQU8sQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUVuRSxLQUFLLENBQUMsVUFBVSxFQUFFO1FBQ2QsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsUUFBUTtLQUNqQixDQUFDO1NBQ0QsSUFBSSxDQUFDLGtCQUFRO1FBRVYsSUFBSSxRQUFRLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTtZQUN4QixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQUk7Z0JBRXJCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO2dCQUVuQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2dCQUN6QixDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztnQkFFakIsSUFBSSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksS0FBSyxFQUFFO29CQUN0QyxDQUFDLENBQUMsUUFBUSxHQUFHLGlCQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztpQkFDL0Q7cUJBQU07b0JBQ0gsQ0FBQyxDQUFDLFFBQVEsR0FBRyxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7aUJBQy9EO2dCQUVELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFFVCxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQztZQUU1QixDQUFDLENBQUM7U0FDTDthQUFNO1lBQ0gsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFJO2dCQUVyQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUVyQixDQUFDLENBQUM7U0FDTDtJQUVMLENBQUMsQ0FBQztBQUdOLENBQUMiLCJmaWxlIjoiLi9zcmMvY2xpZW50L3RzL2Rvd25sb2FkRmlsZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscydcblxuXG5sZXQgZG93bmxvYWRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG93bmxvYWQnKVxuICAgIGRvd25sb2FkQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG5cbiAgICAvLyBBc3NlbWJsZSByZXF1ZXN0IGJvZHkgZGF0YVxuXG4gICAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdkYXRhJywgZ2xvYmFscy5hY3RpdmVGaWxlKVxuXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgncmVzb2x1dGlvbicsIGdsb2JhbHMuc2V0dGluZ3MucmVzb2x1dGlvbiArICcnKVxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2xpbmVXaWR0aCcsIGdsb2JhbHMuc2V0dGluZ3MubGluZVdpZHRoICsgJycpXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZnBzJywgZ2xvYmFscy5zZXR0aW5ncy5mcHMgKyAnJylcbiAgICAgICAgXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZUZvcm1hdCcsIGdsb2JhbHMuc2V0dGluZ3MuZmlsZUZvcm1hdCArICcnKVxuXG4gICAgZmV0Y2goJy9jb252ZXJ0Jywge1xuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgYm9keTogZm9ybURhdGFcbiAgICB9KVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcblxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuYmxvYigpLnRoZW4oYmxvYiA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgICAgICAgICAgICAgICAgIGEuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgYS5ocmVmID0gdXJsO1xuXG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbHMuc2V0dGluZ3MuZmlsZUZvcm1hdCA9PSAnR0lGJykge1xuICAgICAgICAgICAgICAgICAgICBhLmRvd25sb2FkID0gZ2xvYmFscy5hY3RpdmVGaWxlLm5hbWUucmVwbGFjZSgnLmlsZCcsICcuZ2lmJylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhLmRvd25sb2FkID0gZ2xvYmFscy5hY3RpdmVGaWxlLm5hbWUucmVwbGFjZSgnLmlsZCcsICcuemlwJylcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpXG4gICAgICAgICAgICAgICAgYS5jbGljaygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbihqc29uID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24pXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgIH0pXG5cblxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/client/ts/downloadFile.ts\n')},"./src/client/ts/drawingLoop.ts":/*!**************************************!*\
  !*** ./src/client/ts/drawingLoop.ts ***!
  \**************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar drawFrame_1 = __webpack_require__(/*! ../../server/shared/drawFrame */ "./src/server/shared/drawFrame.ts");\nvar Values_1 = __webpack_require__(/*! ../../../../webParticles/src/ts/ui_thread/values/Values */ "../webParticles/src/ts/ui_thread/values/Values.ts");\nvar globals_1 = __webpack_require__(/*! ./globals */ "./src/client/ts/globals.ts");\nvar values = new Values_1.default(document.getElementById(\'controls\'));\nvar _loop_1 = function (val) {\n    val.on(\'change\', function () {\n        globals_1.default.settings[val.scriptName] = val.value;\n        if (val.scriptName == \'resolution\') {\n            ctx.canvas.width = ctx.canvas.height = globals_1.default.settings.resolution;\n        }\n    });\n};\nfor (var _i = 0, _a = values.values; _i < _a.length; _i++) {\n    var val = _a[_i];\n    _loop_1(val);\n}\nvar ctx = document.querySelector(\'canvas\').getContext(\'2d\');\nctx.canvas.width = ctx.canvas.height = globals_1.default.settings.resolution;\nvar requestID;\nfunction startDrawingLoop(file) {\n    var currentFrame = 0;\n    var currentFps = 0;\n    var now;\n    var then = performance.now();\n    var times = [];\n    function loop() {\n        now = performance.now();\n        var elapsed = now - then;\n        if (elapsed > 1000 / globals_1.default.settings.fps) {\n            then = now - (elapsed % (1000 / globals_1.default.settings.fps));\n            drawFrame_1.default(ctx, file.pointData, currentFrame, {\n                resolution: globals_1.default.settings.resolution,\n                lineWidth: globals_1.default.settings.lineWidth\n            });\n            currentFrame++;\n            if (currentFrame >= file.pointData.length - 1) {\n                currentFrame = 0;\n            }\n            now = performance.now();\n            while (times.length > 0 && times[0] <= now - 990) {\n                times.shift();\n            }\n            times.push(now);\n            currentFps = times.length;\n        }\n        requestID = requestAnimationFrame(loop);\n    }\n    loop();\n}\nexports.default = startDrawingLoop;\nfunction stopDrawingLoop() {\n    cancelAnimationFrame(requestID);\n}\nexports.stopDrawingLoop = stopDrawingLoop;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3RzL2RyYXdpbmdMb29wLnRzP2QxNGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrR0FBcUQ7QUFFckQsdUpBQTRFO0FBQzVFLG1GQUErQjtBQUsvQixJQUFJLE1BQU0sR0FBRyxJQUFJLGdCQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFFbkQsR0FBRztJQUNSLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ2IsaUJBQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLO1FBRTVDLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxZQUFZLEVBQUU7WUFDaEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUMsVUFBVTtTQUNyRTtJQUNMLENBQUMsQ0FBQzs7QUFQTixLQUFnQixVQUFhLEVBQWIsV0FBTSxDQUFDLE1BQU0sRUFBYixjQUFhLEVBQWIsSUFBYTtJQUF4QixJQUFJLEdBQUc7WUFBSCxHQUFHO0NBUVg7QUFJRCxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDdkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUMsVUFBVTtBQUV0RSxJQUFJLFNBQWlCO0FBR3JCLFNBQXdCLGdCQUFnQixDQUFDLElBQWM7SUFFbkQsSUFBSSxZQUFZLEdBQUcsQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxDQUFDO0lBR2xCLElBQUksR0FBVztJQUNmLElBQUksSUFBSSxHQUFXLFdBQVcsQ0FBQyxHQUFHLEVBQUU7SUFHcEMsSUFBSSxLQUFLLEdBQWEsRUFBRTtJQUd4QixTQUFTLElBQUk7UUFFVCxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtRQUN2QixJQUFJLE9BQU8sR0FBRyxHQUFHLEdBQUcsSUFBSTtRQUV4QixJQUFJLE9BQU8sR0FBRyxJQUFJLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBRXZDLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFLdEQsbUJBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUU7Z0JBQ3pDLFVBQVUsRUFBRSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVO2dCQUN2QyxTQUFTLEVBQUUsaUJBQU8sQ0FBQyxRQUFRLENBQUMsU0FBUzthQUN4QyxDQUFDO1lBSUYsWUFBWSxFQUFFO1lBRWQsSUFBSSxZQUFZLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFFO2dCQUN6QyxZQUFZLEdBQUcsQ0FBQzthQUNuQjtZQUlELEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDeEIsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRTtnQkFDOUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2pCO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVoQixVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU07U0FFNUI7UUFFRCxTQUFTLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDO0lBRTNDLENBQUM7SUFFRCxJQUFJLEVBQUU7QUFFVixDQUFDO0FBeERELG1DQXdEQztBQUVELFNBQWdCLGVBQWU7SUFFM0Isb0JBQW9CLENBQUMsU0FBUyxDQUFDO0FBRW5DLENBQUM7QUFKRCwwQ0FJQyIsImZpbGUiOiIuL3NyYy9jbGllbnQvdHMvZHJhd2luZ0xvb3AudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSUxEQUZpbGUgZnJvbSAnLi4vLi4vc2VydmVyL3NoYXJlZC9JTERBRmlsZSdcbmltcG9ydCBkcmF3RnJhbWUgZnJvbSAnLi4vLi4vc2VydmVyL3NoYXJlZC9kcmF3RnJhbWUnXG5cbmltcG9ydCBWYWx1ZXMgZnJvbSAnLi4vLi4vLi4vLi4vd2ViUGFydGljbGVzL3NyYy90cy91aV90aHJlYWQvdmFsdWVzL1ZhbHVlcydcbmltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscydcblxuXG4vLyBVcGRhdGUgU2V0dGluZ3MgdmlhIFNsaWRlcnNcblxubGV0IHZhbHVlcyA9IG5ldyBWYWx1ZXMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRyb2xzJykpXG5cbmZvciAobGV0IHZhbCBvZiB2YWx1ZXMudmFsdWVzKSB7XG4gICAgdmFsLm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIGdsb2JhbHMuc2V0dGluZ3NbdmFsLnNjcmlwdE5hbWVdID0gdmFsLnZhbHVlXG5cbiAgICAgICAgaWYgKHZhbC5zY3JpcHROYW1lID09ICdyZXNvbHV0aW9uJykge1xuICAgICAgICAgICAgY3R4LmNhbnZhcy53aWR0aCA9IGN0eC5jYW52YXMuaGVpZ2h0ID0gZ2xvYmFscy5zZXR0aW5ncy5yZXNvbHV0aW9uXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5cblxubGV0IGN0eCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NhbnZhcycpLmdldENvbnRleHQoJzJkJylcbiAgICBjdHguY2FudmFzLndpZHRoID0gY3R4LmNhbnZhcy5oZWlnaHQgPSBnbG9iYWxzLnNldHRpbmdzLnJlc29sdXRpb25cblxubGV0IHJlcXVlc3RJRDogbnVtYmVyXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnREcmF3aW5nTG9vcChmaWxlOiBJTERBRmlsZSkge1xuXG4gICAgbGV0IGN1cnJlbnRGcmFtZSA9IDBcbiAgICBsZXQgY3VycmVudEZwcyA9IDBcblxuICAgIC8vIEZQUyBMaW1pdGVyXG4gICAgbGV0IG5vdzogbnVtYmVyXG4gICAgbGV0IHRoZW46IG51bWJlciA9IHBlcmZvcm1hbmNlLm5vdygpXG5cbiAgICAvLyBGUFMgQ291bnRlclxuICAgIGxldCB0aW1lczogbnVtYmVyW10gPSBbXVxuXG5cbiAgICBmdW5jdGlvbiBsb29wKCkge1xuXG4gICAgICAgIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICAgIGxldCBlbGFwc2VkID0gbm93IC0gdGhlblxuXG4gICAgICAgIGlmIChlbGFwc2VkID4gMTAwMCAvIGdsb2JhbHMuc2V0dGluZ3MuZnBzKSB7XG5cbiAgICAgICAgICAgIHRoZW4gPSBub3cgLSAoZWxhcHNlZCAlICgxMDAwIC8gZ2xvYmFscy5zZXR0aW5ncy5mcHMpKVxuXG5cbiAgICAgICAgICAgIC8vIFJlbmRlciBDb2RlIEhlcmVcblxuICAgICAgICAgICAgZHJhd0ZyYW1lKGN0eCwgZmlsZS5wb2ludERhdGEsIGN1cnJlbnRGcmFtZSwge1xuICAgICAgICAgICAgICAgIHJlc29sdXRpb246IGdsb2JhbHMuc2V0dGluZ3MucmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IGdsb2JhbHMuc2V0dGluZ3MubGluZVdpZHRoXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyBSZW5kZXIgQ29kZSBTdG9wIEhlcmVcbiBcbiAgICAgICAgICAgIGN1cnJlbnRGcmFtZSsrXG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUgPj0gZmlsZS5wb2ludERhdGEubGVuZ3RoLTEpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RnJhbWUgPSAwXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZwcyBDb3VudGVyXG5cbiAgICAgICAgICAgIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgd2hpbGUgKHRpbWVzLmxlbmd0aCA+IDAgJiYgdGltZXNbMF0gPD0gbm93IC0gOTkwKSB7XG4gICAgICAgICAgICAgICAgdGltZXMuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVzLnB1c2gobm93KTtcblxuICAgICAgICAgICAgY3VycmVudEZwcyA9IHRpbWVzLmxlbmd0aFxuXG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0SUQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcblxuICAgIH1cblxuICAgIGxvb3AoKVxuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wRHJhd2luZ0xvb3AoKSB7XG5cbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyZXF1ZXN0SUQpXG5cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/client/ts/drawingLoop.ts\n')},"./src/client/ts/globals.ts":/*!**********************************!*\
  !*** ./src/client/ts/globals.ts ***!
  \**********************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar globals = {\n    settings: {\n        resolution: 256,\n        lineWidth: 1,\n        fps: 12,\n        fileFormat: \'GIF\'\n    },\n    activeFile: null,\n    activeFileParsed: null\n};\nexports.default = globals;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3RzL2dsb2JhbHMudHM/OTMyYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVlBLElBQU0sT0FBTyxHQUFZO0lBRXJCLFFBQVEsRUFBRTtRQUNOLFVBQVUsRUFBRSxHQUFHO1FBQ2YsU0FBUyxFQUFFLENBQUM7UUFDWixHQUFHLEVBQUUsRUFBRTtRQUNQLFVBQVUsRUFBRSxLQUFLO0tBQ3BCO0lBRUQsVUFBVSxFQUFFLElBQUk7SUFDaEIsZ0JBQWdCLEVBQUUsSUFBSTtDQUV6QjtBQUVELGtCQUFlLE9BQU8iLCJmaWxlIjoiLi9zcmMvY2xpZW50L3RzL2dsb2JhbHMudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSUxEQUZpbGUgZnJvbSBcIi4uLy4uL3NlcnZlci9zaGFyZWQvSUxEQUZpbGVcIlxuaW1wb3J0IGRyYXdTZXR0aW5ncyBmcm9tIFwiLi4vLi4vc2VydmVyL3NoYXJlZC9kcmF3U2V0dGluZ3NcIlxuXG5pbnRlcmZhY2UgZ2xvYmFscyB7XG5cbiAgICBzZXR0aW5nczogZHJhd1NldHRpbmdzXG5cbiAgICBhY3RpdmVGaWxlOiBGaWxlXG4gICAgYWN0aXZlRmlsZVBhcnNlZDogSUxEQUZpbGVcblxufVxuXG5jb25zdCBnbG9iYWxzOiBnbG9iYWxzID0ge1xuXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgICAgcmVzb2x1dGlvbjogMjU2LFxuICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgIGZwczogMTIsXG4gICAgICAgIGZpbGVGb3JtYXQ6ICdHSUYnXG4gICAgfSxcblxuICAgIGFjdGl2ZUZpbGU6IG51bGwsXG4gICAgYWN0aXZlRmlsZVBhcnNlZDogbnVsbFxuICAgIFxufVxuXG5leHBvcnQgZGVmYXVsdCBnbG9iYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/client/ts/globals.ts\n')},"./src/client/ts/index.ts":/*!********************************!*\
  !*** ./src/client/ts/index.ts ***!
  \********************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n__webpack_require__(/*! ./chooseFile */ "./src/client/ts/chooseFile.ts");\n__webpack_require__(/*! ./downloadFile */ "./src/client/ts/downloadFile.ts");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3RzL2luZGV4LnRzPzdiNTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5RUFBcUI7QUFDckIsNkVBQXVCIiwiZmlsZSI6Ii4vc3JjL2NsaWVudC90cy9pbmRleC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9jaG9vc2VGaWxlJ1xuaW1wb3J0ICcuL2Rvd25sb2FkRmlsZSciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/client/ts/index.ts\n')},"./src/client/ts/processFile.ts":/*!**************************************!*\
  !*** ./src/client/ts/processFile.ts ***!
  \**************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('/* WEBPACK VAR INJECTION */(function(Buffer) {\nObject.defineProperty(exports, "__esModule", { value: true });\nvar ILDAFile_1 = __webpack_require__(/*! ../../server/shared/ILDAFile */ "./src/server/shared/ILDAFile.ts");\nvar drawingLoop_1 = __webpack_require__(/*! ./drawingLoop */ "./src/client/ts/drawingLoop.ts");\nvar globals_1 = __webpack_require__(/*! ./globals */ "./src/client/ts/globals.ts");\nfunction processFile(file) {\n    var filenameDiv = document.getElementById(\'filename\');\n    filenameDiv.className = \'\';\n    filenameDiv.textContent = \'loading...\';\n    getBufferData(file)\n        .then(function (data) {\n        if (checkFileFormat(data)) {\n            globals_1.default.activeFile = file;\n            globals_1.default.activeFileParsed = new ILDAFile_1.default(file.name, data);\n            drawingLoop_1.default(globals_1.default.activeFileParsed);\n            filenameDiv.className = \'\';\n            filenameDiv.textContent = file.name;\n        }\n        else {\n            filenameDiv.className = \'error\';\n            filenameDiv.textContent = \'Invalid File Format\';\n        }\n    });\n}\nexports.default = processFile;\nfunction getBufferData(file) {\n    return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onload = function () {\n            resolve(Buffer.from(reader.result));\n        };\n    });\n}\nfunction checkFileFormat(bufferData) {\n    return bufferData.slice(0, 4).toString() === \'ILDA\' ? true : false;\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3RzL3Byb2Nlc3NGaWxlLnRzPzlmZDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0R0FBbUQ7QUFDbkQsK0ZBQTRDO0FBQzVDLG1GQUErQjtBQVMvQixTQUF3QixXQUFXLENBQUUsSUFBVTtJQUUzQyxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQztJQUNyRCxXQUFXLENBQUMsU0FBUyxHQUFHLEVBQUU7SUFDMUIsV0FBVyxDQUFDLFdBQVcsR0FBRyxZQUFZO0lBRXRDLGFBQWEsQ0FBQyxJQUFJLENBQUM7U0FDbEIsSUFBSSxDQUFDLGNBQUk7UUFFTixJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUV2QixpQkFBTyxDQUFDLFVBQVUsR0FBRyxJQUFJO1lBQ3pCLGlCQUFPLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxrQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBRXhELHFCQUFnQixDQUFDLGlCQUFPLENBQUMsZ0JBQWdCLENBQUM7WUFFMUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxFQUFFO1lBQzFCLFdBQVcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUk7U0FFdEM7YUFBTTtZQUVILFdBQVcsQ0FBQyxTQUFTLEdBQUcsT0FBTztZQUMvQixXQUFXLENBQUMsV0FBVyxHQUFHLHFCQUFxQjtTQUVsRDtJQUVMLENBQUMsQ0FBQztBQUVOLENBQUM7QUE1QkQsOEJBNEJDO0FBRUQsU0FBUyxhQUFhLENBQUMsSUFBVTtJQVE3QixPQUFPLElBQUksT0FBTyxDQUFTLFVBQUMsT0FBTyxFQUFFLE1BQU07UUFFdkMsSUFBSSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7UUFDekIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUU5QixNQUFNLENBQUMsTUFBTSxHQUFHO1lBQ1osT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7SUFFVCxDQUFDLENBQUM7QUFFTixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsVUFBa0I7SUFFdkMsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSztBQUV0RSxDQUFDIiwiZmlsZSI6Ii4vc3JjL2NsaWVudC90cy9wcm9jZXNzRmlsZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJTERBRmlsZSBmcm9tICcuLi8uLi9zZXJ2ZXIvc2hhcmVkL0lMREFGaWxlJ1xuaW1wb3J0IHN0YXJ0RHJhd2luZ0xvb3AgZnJvbSAnLi9kcmF3aW5nTG9vcCdcbmltcG9ydCBnbG9iYWxzIGZyb20gJy4vZ2xvYmFscydcblxuXG4vKiBDb252ZXJ0cyB0aGUgZmlsZSB0byBhIEJ1ZmZlclxuICogQ2hlY2tzIGlmIHRoZSBmaWxlIGlzIHZhbGlkXG4gKiBTdGFydHMgdGhlIGRyYXdpbmcgbG9vcCBpZiBpdCBpc1xuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvY2Vzc0ZpbGUgKGZpbGU6IEZpbGUpIHtcblxuICAgIGxldCBmaWxlbmFtZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlbmFtZScpXG4gICAgZmlsZW5hbWVEaXYuY2xhc3NOYW1lID0gJydcbiAgICBmaWxlbmFtZURpdi50ZXh0Q29udGVudCA9ICdsb2FkaW5nLi4uJ1xuICAgIFxuICAgIGdldEJ1ZmZlckRhdGEoZmlsZSlcbiAgICAudGhlbihkYXRhID0+IHtcblxuICAgICAgICBpZiAoY2hlY2tGaWxlRm9ybWF0KGRhdGEpKSB7XG5cbiAgICAgICAgICAgIGdsb2JhbHMuYWN0aXZlRmlsZSA9IGZpbGVcbiAgICAgICAgICAgIGdsb2JhbHMuYWN0aXZlRmlsZVBhcnNlZCA9IG5ldyBJTERBRmlsZShmaWxlLm5hbWUsIGRhdGEpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN0YXJ0RHJhd2luZ0xvb3AoZ2xvYmFscy5hY3RpdmVGaWxlUGFyc2VkKVxuXG4gICAgICAgICAgICBmaWxlbmFtZURpdi5jbGFzc05hbWUgPSAnJ1xuICAgICAgICAgICAgZmlsZW5hbWVEaXYudGV4dENvbnRlbnQgPSBmaWxlLm5hbWVcbiAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmaWxlbmFtZURpdi5jbGFzc05hbWUgPSAnZXJyb3InXG4gICAgICAgICAgICBmaWxlbmFtZURpdi50ZXh0Q29udGVudCA9ICdJbnZhbGlkIEZpbGUgRm9ybWF0J1xuXG4gICAgICAgIH1cbiAgICBcbiAgICB9KVxuXG59XG5cbmZ1bmN0aW9uIGdldEJ1ZmZlckRhdGEoZmlsZTogRmlsZSkge1xuICAgIC8qKlxuICAgICAqIFRha2VzIGEgRmlsZSBhbmQgY29udmVydHMgaXQgdG8gYSBCdWZmZXJcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZmlsZSAtIFRoZSBmaWxlIHRvIGNvbnZlcnRcbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2Ugb2YgYSBjb252ZXJ0ZWQgQnVmZmVyXG4gICAgICovXG4gICAgXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSlcblxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKEJ1ZmZlci5mcm9tKHJlYWRlci5yZXN1bHQpKVxuICAgICAgICAgICAgfVxuXG4gICAgfSkgICAgICBcbiAgICBcbn1cblxuZnVuY3Rpb24gY2hlY2tGaWxlRm9ybWF0KGJ1ZmZlckRhdGE6IEJ1ZmZlcikge1xuXG4gICAgcmV0dXJuIGJ1ZmZlckRhdGEuc2xpY2UoMCwgNCkudG9TdHJpbmcoKSA9PT0gJ0lMREEnID8gdHJ1ZSA6IGZhbHNlXG5cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/client/ts/processFile.ts\n')},"./src/server/shared/ILDAFile.ts":/*!***************************************!*\
  !*** ./src/server/shared/ILDAFile.ts ***!
  \***************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar headerStructure = {\n    format: {\n        type: \'string\',\n        range: [0, 4]\n    },\n    reserved_1: {\n        type: \'uint\',\n        range: [4, 7],\n    },\n    formatCode: {\n        type: \'uint\',\n        range: [7, 8]\n    },\n    frameName: {\n        type: \'string\',\n        range: [8, 16]\n    },\n    company: {\n        type: \'string\',\n        range: [16, 24]\n    },\n    dataRecords: {\n        type: \'uint16\',\n        range: [24, 26]\n    },\n    frame: {\n        type: \'uint16\',\n        range: [26, 28]\n    },\n    length: {\n        type: \'uint16\',\n        range: [28, 30]\n    },\n    projector: {\n        type: \'uint\',\n        range: [30, 31]\n    },\n    reserved_2: {\n        type: \'uint\',\n        range: [31, 32]\n    }\n};\nvar ilda_0 = {\n    x: {\n        type: \'int16\',\n        range: [0, 2]\n    },\n    y: {\n        type: \'int16\',\n        range: [2, 4]\n    },\n    z: {\n        type: \'int16\',\n        range: [4, 6]\n    },\n    statusCode: {\n        type: \'uint\',\n        range: [6, 7]\n    },\n    colorIndex: {\n        type: \'uint\',\n        range: [7, 8]\n    },\n};\nvar ilda_1 = {\n    x: {\n        type: \'int16\',\n        range: [0, 2]\n    },\n    y: {\n        type: \'int16\',\n        range: [2, 4]\n    },\n    statusCode: {\n        type: \'uint\',\n        range: [4, 5]\n    },\n    colorIndex: {\n        type: \'uint\',\n        range: [5, 6]\n    },\n};\nvar ilda_2 = {\n    r: {\n        type: \'uint\',\n        range: [0, 1]\n    },\n    g: {\n        type: \'uint\',\n        range: [1, 2]\n    },\n    b: {\n        type: \'uint\',\n        range: [2, 3]\n    }\n};\nvar ilda_4 = {\n    x: {\n        type: \'int16\',\n        range: [0, 2]\n    },\n    y: {\n        type: \'int16\',\n        range: [2, 4]\n    },\n    z: {\n        type: \'int16\',\n        range: [4, 6]\n    },\n    statusCode: {\n        type: \'uint\',\n        range: [6, 7]\n    },\n    b: {\n        type: \'uint\',\n        range: [7, 8]\n    },\n    g: {\n        type: \'uint\',\n        range: [8, 9]\n    },\n    r: {\n        type: \'uint\',\n        range: [9, 10]\n    },\n};\nvar ilda_5 = {\n    x: {\n        type: \'int16\',\n        range: [0, 2]\n    },\n    y: {\n        type: \'int16\',\n        range: [2, 4]\n    },\n    statusCode: {\n        type: \'uint\',\n        range: [4, 5]\n    },\n    b: {\n        type: \'uint\',\n        range: [5, 6]\n    },\n    g: {\n        type: \'uint\',\n        range: [6, 7]\n    },\n    r: {\n        type: \'uint\',\n        range: [7, 8]\n    },\n};\nvar ilda_point_structure = {\n    ilda_0: ilda_0,\n    ilda_1: ilda_1,\n    ilda_2: ilda_2,\n    ilda_4: ilda_4,\n    ilda_5: ilda_5\n};\nvar ILDAFile = (function () {\n    function ILDAFile(filename, bufferData) {\n        this.filename = filename;\n        this.bufferData = bufferData;\n        this.byteOffset = 0;\n        this.headerData = [];\n        this.pointData = [];\n        this.readFile();\n    }\n    ILDAFile.prototype.readHeaderOnce = function () {\n        for (var fieldname in headerStructure) {\n            var datatype = headerStructure[fieldname].type;\n            var start = headerStructure[fieldname].range[0];\n            var end = headerStructure[fieldname].range[1];\n            var fieldvalue = this.convertBuffer(this.bufferData.slice(start, end), datatype);\n            console.log(fieldname, fieldvalue);\n        }\n    };\n    ILDAFile.prototype.readFile = function () {\n        while (this.byteOffset < this.bufferData.length) {\n            this.readHeader();\n            this.readPointData();\n        }\n    };\n    ILDAFile.prototype.readHeader = function () {\n        var header = {};\n        var byteRange = 0;\n        for (var fieldname in headerStructure) {\n            var datatype = headerStructure[fieldname].type;\n            var start = headerStructure[fieldname].range[0] + this.byteOffset;\n            var end = headerStructure[fieldname].range[1] + this.byteOffset;\n            var fieldvalue = this.convertBuffer(this.bufferData.slice(start, end), datatype);\n            byteRange += end - start;\n            header[fieldname] = fieldvalue;\n        }\n        this.byteOffset += byteRange;\n        this.headerData.push(header);\n    };\n    ILDAFile.prototype.readPointData = function () {\n        if (this.byteOffset >= this.bufferData.length)\n            return;\n        var header = this.headerData[this.headerData.length - 1];\n        var pointStructure = ilda_point_structure[\'ilda_\' + header.formatCode];\n        var pointArr = [];\n        for (var index = 0; index < header.dataRecords; index++) {\n            var point = {};\n            var byteRange = 0;\n            for (var fieldname in pointStructure) {\n                var datatype = pointStructure[fieldname].type;\n                var start = pointStructure[fieldname].range[0] + this.byteOffset;\n                var end = pointStructure[fieldname].range[1] + this.byteOffset;\n                var fieldvalue = this.convertBuffer(this.bufferData.slice(start, end), datatype);\n                byteRange += end - start;\n                point[fieldname] = fieldvalue;\n            }\n            this.byteOffset += byteRange;\n            pointArr.push(point);\n        }\n        this.pointData.push(pointArr);\n    };\n    ILDAFile.prototype.convertBuffer = function (buffer, type) {\n        var returnVal;\n        switch (type) {\n            case \'string\':\n                returnVal = buffer.toString();\n                break;\n            case \'uint\':\n                returnVal = buffer.readUInt8(0);\n                break;\n            case \'int\':\n                returnVal = buffer.readInt8(0);\n                break;\n            case \'uint16\':\n                returnVal = buffer.readUInt16BE(0);\n                break;\n            case \'int16\':\n                returnVal = buffer.readInt16BE(0);\n                break;\n            default:\n                throw Error(\'unknown type "\' + type + \'" in file structure\');\n        }\n        return returnVal;\n    };\n    return ILDAFile;\n}());\nexports.default = ILDAFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/server/shared/ILDAFile.ts\n')},"./src/server/shared/defaultColorIndex.ts":/*!************************************************!*\
  !*** ./src/server/shared/defaultColorIndex.ts ***!
  \************************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar colorIndex = {\n    0: {\n        r: 255,\n        g: 0,\n        b: 0,\n        name: \'Red\'\n    },\n    1: {\n        r: 255,\n        g: 16,\n        b: 0\n    },\n    2: {\n        r: 255,\n        g: 32,\n        b: 0\n    },\n    3: {\n        r: 255,\n        g: 48,\n        b: 0\n    },\n    4: {\n        r: 255,\n        g: 64,\n        b: 0\n    },\n    5: {\n        r: 255,\n        g: 80,\n        b: 0\n    },\n    6: {\n        r: 255,\n        g: 96,\n        b: 0\n    },\n    7: {\n        r: 255,\n        g: 112,\n        b: 0\n    },\n    8: {\n        r: 255,\n        g: 128,\n        b: 0\n    },\n    9: {\n        r: 255,\n        g: 144,\n        b: 0\n    },\n    10: {\n        r: 255,\n        g: 160,\n        b: 0\n    },\n    11: {\n        r: 255,\n        g: 176,\n        b: 0\n    },\n    12: {\n        r: 255,\n        g: 192,\n        b: 0\n    },\n    13: {\n        r: 255,\n        g: 208,\n        b: 0\n    },\n    14: {\n        r: 255,\n        g: 224,\n        b: 0\n    },\n    15: {\n        r: 255,\n        g: 240,\n        b: 0\n    },\n    16: {\n        r: 255,\n        g: 255,\n        b: 0,\n        name: \'Yellow\'\n    },\n    17: {\n        r: 224,\n        g: 255,\n        b: 0\n    },\n    18: {\n        r: 192,\n        g: 255,\n        b: 0\n    },\n    19: {\n        r: 160,\n        g: 255,\n        b: 0\n    },\n    20: {\n        r: 128,\n        g: 255,\n        b: 0\n    },\n    21: {\n        r: 96,\n        g: 255,\n        b: 0\n    },\n    22: {\n        r: 64,\n        g: 255,\n        b: 0\n    },\n    23: {\n        r: 32,\n        g: 255,\n        b: 0\n    },\n    24: {\n        r: 0,\n        g: 255,\n        b: 0,\n        name: \'Green\'\n    },\n    25: {\n        r: 0,\n        g: 255,\n        b: 36\n    },\n    26: {\n        r: 0,\n        g: 255,\n        b: 73\n    },\n    27: {\n        r: 0,\n        g: 255,\n        b: 109\n    },\n    28: {\n        r: 0,\n        g: 255,\n        b: 146\n    },\n    29: {\n        r: 0,\n        g: 255,\n        b: 182\n    },\n    30: {\n        r: 0,\n        g: 255,\n        b: 219\n    },\n    31: {\n        r: 0,\n        g: 255,\n        b: 255,\n        name: \'Cyan\'\n    },\n    32: {\n        r: 0,\n        g: 227,\n        b: 255\n    },\n    33: {\n        r: 0,\n        g: 198,\n        b: 255\n    },\n    34: {\n        r: 0,\n        g: 170,\n        b: 255\n    },\n    35: {\n        r: 0,\n        g: 142,\n        b: 255\n    },\n    36: {\n        r: 0,\n        g: 113,\n        b: 255\n    },\n    37: {\n        r: 0,\n        g: 85,\n        b: 255\n    },\n    38: {\n        r: 0,\n        g: 56,\n        b: 255\n    },\n    39: {\n        r: 0,\n        g: 28,\n        b: 255\n    },\n    40: {\n        r: 0,\n        g: 0,\n        b: 255,\n        name: \'Blue\'\n    },\n    41: {\n        r: 32,\n        g: 0,\n        b: 255\n    },\n    42: {\n        r: 64,\n        g: 0,\n        b: 255\n    },\n    43: {\n        r: 96,\n        g: 0,\n        b: 255\n    },\n    44: {\n        r: 128,\n        g: 0,\n        b: 255\n    },\n    45: {\n        r: 160,\n        g: 0,\n        b: 255\n    },\n    46: {\n        r: 192,\n        g: 0,\n        b: 255\n    },\n    47: {\n        r: 224,\n        g: 0,\n        b: 255\n    },\n    48: {\n        r: 255,\n        g: 0,\n        b: 255,\n        name: \'Magenta\'\n    },\n    49: {\n        r: 255,\n        g: 32,\n        b: 255\n    },\n    50: {\n        r: 255,\n        g: 64,\n        b: 255\n    },\n    51: {\n        r: 255,\n        g: 96,\n        b: 255\n    },\n    52: {\n        r: 255,\n        g: 128,\n        b: 255\n    },\n    53: {\n        r: 255,\n        g: 160,\n        b: 255\n    },\n    54: {\n        r: 255,\n        g: 192,\n        b: 255\n    },\n    55: {\n        r: 255,\n        g: 224,\n        b: 255\n    },\n    56: {\n        r: 255,\n        g: 255,\n        b: 255,\n        name: \'White\'\n    },\n    57: {\n        r: 255,\n        g: 224,\n        b: 224\n    },\n    58: {\n        r: 255,\n        g: 192,\n        b: 192\n    },\n    59: {\n        r: 255,\n        g: 160,\n        b: 160\n    },\n    60: {\n        r: 255,\n        g: 128,\n        b: 128\n    },\n    61: {\n        r: 255,\n        g: 96,\n        b: 96\n    },\n    62: {\n        r: 255,\n        g: 64,\n        b: 64\n    },\n    63: {\n        r: 255,\n        g: 32,\n        b: 32\n    },\n};\nexports.default = colorIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/server/shared/defaultColorIndex.ts\n')},"./src/server/shared/drawFrame.ts":/*!****************************************!*\
  !*** ./src/server/shared/drawFrame.ts ***!
  \****************************************//*! no static exports found */function(module,exports,__webpack_require__){'use strict';eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar defaultColorIndex_1 = __webpack_require__(/*! ./defaultColorIndex */ "./src/server/shared/defaultColorIndex.ts");\nfunction drawFrame(ctx, drawData, frame, settings) {\n    ctx.clearRect(0, 0, settings.resolution, settings.resolution);\n    ctx.lineWidth = settings.lineWidth;\n    for (var i = 1; i < drawData[frame].length; i++) {\n        var startPoint = drawData[frame][i - 1];\n        var nextPoint = drawData[frame][i + 0];\n        if (startPoint.statusCode == 64)\n            continue;\n        if (nextPoint.statusCode == 64)\n            continue;\n        var x1 = (startPoint.x + 32768) / 65535 * settings.resolution;\n        var y1 = (1 - (startPoint.y + 32768) / 65535) * settings.resolution;\n        var x2 = (nextPoint.x + 32768) / 65535 * settings.resolution;\n        var y2 = (1 - (nextPoint.y + 32768) / 65535) * settings.resolution;\n        var r = void 0, g = void 0, b = void 0;\n        if (startPoint.colorIndex) {\n            var ci = startPoint.colorIndex % 64;\n            r = defaultColorIndex_1.default[ci].r;\n            g = defaultColorIndex_1.default[ci].g;\n            b = defaultColorIndex_1.default[ci].b;\n        }\n        else {\n            r = startPoint.r;\n            g = startPoint.g;\n            b = startPoint.b;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.strokeStyle = \'rgb(\' + r + \', \' + g + \', \' + b + \')\';\n        ctx.stroke();\n    }\n}\nexports.default = drawFrame;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyL3NoYXJlZC9kcmF3RnJhbWUudHM/OTE4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFIQUE0QztBQUc1QyxTQUF3QixTQUFTLENBQUMsR0FBUSxFQUFFLFFBQXVCLEVBQUUsS0FBYSxFQUFFLFFBQXNCO0lBRXRHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUM7SUFDN0QsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUztJQUVsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUU3QyxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0QyxJQUFJLFVBQVUsQ0FBQyxVQUFVLElBQUksRUFBRTtZQUFFLFNBQVE7UUFDekMsSUFBSSxTQUFTLENBQUMsVUFBVSxJQUFJLEVBQUU7WUFBRSxTQUFRO1FBS3hDLElBQUksRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLFVBQVU7UUFDN0QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxVQUFVO1FBQ25FLElBQUksRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLFVBQVU7UUFDNUQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxVQUFVO1FBTWxFLElBQUksQ0FBQyxXQUFFLENBQUMsV0FBRSxDQUFDO1FBRVgsSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFO1lBRXZCLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxVQUFVLEdBQUcsRUFBRTtZQUVuQyxDQUFDLEdBQUcsMkJBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsR0FBRywyQkFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxHQUFHLDJCQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUV2QjthQUFNO1lBRUgsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1lBQ2hCLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztZQUNoQixDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7U0FFbkI7UUFJRCxHQUFHLENBQUMsU0FBUyxFQUFFO1FBQ2YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUVsQixHQUFHLENBQUMsV0FBVyxHQUFHLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEdBQUc7UUFDeEQsR0FBRyxDQUFDLE1BQU0sRUFBRTtLQUVmO0FBRUwsQ0FBQztBQXRERCw0QkFzREMiLCJmaWxlIjoiLi9zcmMvc2VydmVyL3NoYXJlZC9kcmF3RnJhbWUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludERhdGEgfSBmcm9tICcuL0lMREFGaWxlJ1xuaW1wb3J0IGRyYXdTZXR0aW5ncyBmcm9tICcuL2RyYXdTZXR0aW5ncydcbmltcG9ydCBjb2xvckluZGV4IGZyb20gJy4vZGVmYXVsdENvbG9ySW5kZXgnXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHJhd0ZyYW1lKGN0eDogYW55LCBkcmF3RGF0YTogUG9pbnREYXRhW11bXSwgZnJhbWU6IG51bWJlciwgc2V0dGluZ3M6IGRyYXdTZXR0aW5ncykge1xuXG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBzZXR0aW5ncy5yZXNvbHV0aW9uLCBzZXR0aW5ncy5yZXNvbHV0aW9uKVxuICAgIGN0eC5saW5lV2lkdGggPSBzZXR0aW5ncy5saW5lV2lkdGhcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZHJhd0RhdGFbZnJhbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIFxuICAgICAgICBsZXQgc3RhcnRQb2ludCA9IGRyYXdEYXRhW2ZyYW1lXVtpIC0gMV1cbiAgICAgICAgbGV0IG5leHRQb2ludCA9IGRyYXdEYXRhW2ZyYW1lXVtpICsgMF1cblxuICAgICAgICBpZiAoc3RhcnRQb2ludC5zdGF0dXNDb2RlID09IDY0KSBjb250aW51ZVxuICAgICAgICBpZiAobmV4dFBvaW50LnN0YXR1c0NvZGUgPT0gNjQpIGNvbnRpbnVlXG5cblxuICAgICAgICAvLyBQb3NpdGlvblxuXG4gICAgICAgIGxldCB4MSA9IChzdGFydFBvaW50LnggKyAzMjc2OCkgLyA2NTUzNSAqIHNldHRpbmdzLnJlc29sdXRpb25cbiAgICAgICAgbGV0IHkxID0gKDEgLSAoc3RhcnRQb2ludC55ICsgMzI3NjgpIC8gNjU1MzUpICogc2V0dGluZ3MucmVzb2x1dGlvblxuICAgICAgICBsZXQgeDIgPSAobmV4dFBvaW50LnggKyAzMjc2OCkgLyA2NTUzNSAqIHNldHRpbmdzLnJlc29sdXRpb25cbiAgICAgICAgbGV0IHkyID0gKDEgLSAobmV4dFBvaW50LnkgKyAzMjc2OCkgLyA2NTUzNSkgKiBzZXR0aW5ncy5yZXNvbHV0aW9uXG4gICAgICAgIC8vIFogaXMgc3RpbGwgbWlzc2luZ1xuXG5cbiAgICAgICAgLy8gQ29sb3JcblxuICAgICAgICBsZXQgciwgZywgYlxuXG4gICAgICAgIGlmIChzdGFydFBvaW50LmNvbG9ySW5kZXgpIHtcblxuICAgICAgICAgICAgbGV0IGNpID0gc3RhcnRQb2ludC5jb2xvckluZGV4ICUgNjRcblxuICAgICAgICAgICAgciA9IGNvbG9ySW5kZXhbY2ldLnJcbiAgICAgICAgICAgIGcgPSBjb2xvckluZGV4W2NpXS5nXG4gICAgICAgICAgICBiID0gY29sb3JJbmRleFtjaV0uYlxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHIgPSBzdGFydFBvaW50LnJcbiAgICAgICAgICAgIGcgPSBzdGFydFBvaW50LmdcbiAgICAgICAgICAgIGIgPSBzdGFydFBvaW50LmJcblxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBEcmF3XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpXG4gICAgICAgIGN0eC5tb3ZlVG8oeDEsIHkxKVxuICAgICAgICBjdHgubGluZVRvKHgyLCB5MilcblxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiKCcgKyByICsgJywgJyArIGcgKyAnLCAnICsgYiArICcpJ1xuICAgICAgICBjdHguc3Ryb2tlKClcblxuICAgIH1cblxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/server/shared/drawFrame.ts\n')}});